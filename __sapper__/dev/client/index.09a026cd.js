import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, o as onDestroy, e as element, a as space, t as text, c as claim_element, b as children, f as detach_dev, g as claim_space, h as claim_text, j as attr_dev, k as set_style, l as add_location, m as insert_dev, n as append_dev, p as set_data_dev, q as noop, r as add_render_callback, u as validate_each_argument, w as create_component, x as query_selector_all, y as claim_component, z as mount_component, A as listen_dev, B as transition_in, C as transition_out, D as destroy_component, E as destroy_each } from './client.762dcd79.js';
import { N as Navbar, T as Tabbar } from './Tabbar.54b8a54d.js';
import { u as username } from './stores.a4d58cf8.js';

/* src/components/SteamGuard.svelte generated by Svelte v3.22.2 */
const file = "src/components/SteamGuard.svelte";

function create_fragment(ctx) {
	let div3;
	let div0;
	let t0;
	let div1;
	let t1;
	let t2;
	let div2;
	let t3;

	const block = {
		c: function create() {
			div3 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = text(/*code*/ ctx[0]);
			t2 = space();
			div2 = element("div");
			t3 = text(/*username_value*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { id: true, class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { id: true, style: true, class: true });
			children(div0).forEach(detach_dev);
			t0 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { id: true, style: true, class: true });
			var div1_nodes = children(div1);
			t1 = claim_text(div1_nodes, /*code*/ ctx[0]);
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { id: true, class: true });
			var div2_nodes = children(div2);
			t3 = claim_text(div2_nodes, /*username_value*/ ctx[2]);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "id", "timerbar");
			set_style(div0, "width", 100 - /*percentage*/ ctx[1] * 10 + "%");

			set_style(div0, "background-image", /*percentage*/ ctx[1] >= 7
			? "linear-gradient(145deg, rgba(173,40,33,1) 0%, rgba(173,40,33,1) 100%)"
			: "linear-gradient(145deg, rgba(0,0,255,1) 0%, rgba(163,68,201,1) 100%)");

			attr_dev(div0, "class", "svelte-1i0y5o3");
			add_location(div0, file, 38, 1, 652);
			attr_dev(div1, "id", "code");
			set_style(div1, "color", /*percentage*/ ctx[1] >= 7 ? "#AD2821" : "white");
			attr_dev(div1, "class", "svelte-1i0y5o3");
			add_location(div1, file, 39, 1, 901);
			attr_dev(div2, "id", "username");
			attr_dev(div2, "class", "svelte-1i0y5o3");
			add_location(div2, file, 40, 1, 984);
			attr_dev(div3, "id", "wrapper");
			attr_dev(div3, "class", "svelte-1i0y5o3");
			add_location(div3, file, 37, 0, 632);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			append_dev(div3, t0);
			append_dev(div3, div1);
			append_dev(div1, t1);
			append_dev(div3, t2);
			append_dev(div3, div2);
			append_dev(div2, t3);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*percentage*/ 2) {
				set_style(div0, "width", 100 - /*percentage*/ ctx[1] * 10 + "%");
			}

			if (dirty & /*percentage*/ 2) {
				set_style(div0, "background-image", /*percentage*/ ctx[1] >= 7
				? "linear-gradient(145deg, rgba(173,40,33,1) 0%, rgba(173,40,33,1) 100%)"
				: "linear-gradient(145deg, rgba(0,0,255,1) 0%, rgba(163,68,201,1) 100%)");
			}

			if (dirty & /*code*/ 1) set_data_dev(t1, /*code*/ ctx[0]);

			if (dirty & /*percentage*/ 2) {
				set_style(div1, "color", /*percentage*/ ctx[1] >= 7 ? "#AD2821" : "white");
			}

			if (dirty & /*username_value*/ 4) set_data_dev(t3, /*username_value*/ ctx[2]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let code = 72826;
	let percentage = 0;

	function onInterval(callback, time) {
		const interval = setInterval(callback, time);

		onDestroy(() => {
			clearInterval(interval);
		});
	}

	

	function codegen() {
		$$invalidate(0, code = Math.random().toString(36).slice(-5).toUpperCase());
	}

	onInterval(
		function check() {
			if (percentage < 9) {
				$$invalidate(1, ++percentage);
			} else {
				$$invalidate(1, percentage = 0);
				codegen();
			}
		},
		1000
	);

	let username_value;

	const unsubscribe = username.subscribe(value => {
		$$invalidate(2, username_value = value);
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SteamGuard> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("SteamGuard", $$slots, []);

	$$self.$capture_state = () => ({
		onDestroy,
		username,
		code,
		percentage,
		onInterval,
		codegen,
		username_value,
		unsubscribe
	});

	$$self.$inject_state = $$props => {
		if ("code" in $$props) $$invalidate(0, code = $$props.code);
		if ("percentage" in $$props) $$invalidate(1, percentage = $$props.percentage);
		if ("username_value" in $$props) $$invalidate(2, username_value = $$props.username_value);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [code, percentage, username_value];
}

class SteamGuard extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SteamGuard",
			options,
			id: create_fragment.name
		});
	}
}

/* src/routes/index.svelte generated by Svelte v3.22.2 */
const file$1 = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (22:1) {#each [0, 1, 2, 3, 4, 5, 6, 7, 8] as layer}
function create_each_block(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", {
				style: true,
				src: true,
				alt: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			set_style(img, "transform", "translate(0," + -/*y*/ ctx[0] * /*layer*/ ctx[3] / (/*layers*/ ctx[1].length - 1) + "px)");
			if (img.src !== (img_src_value = "https://www.firewatchgame.com/images/parallax/parallax" + /*layer*/ ctx[3] + ".png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = "parallax layer " + /*layer*/ ctx[3]);
			attr_dev(img, "class", "svelte-f74ee6");
			add_location(img, file$1, 22, 2, 526);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*y*/ 1) {
				set_style(img, "transform", "translate(0," + -/*y*/ ctx[0] * /*layer*/ ctx[3] / (/*layers*/ ctx[1].length - 1) + "px)");
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(22:1) {#each [0, 1, 2, 3, 4, 5, 6, 7, 8] as layer}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let scrolling = false;

	let clear_scrolling = () => {
		scrolling = false;
	};

	let scrolling_timeout;
	let t0;
	let t1;
	let div0;
	let t2;
	let a;
	let t3;
	let div2;
	let span;
	let t4;
	let t5;
	let div1;
	let t6;
	let t7;
	let t8;
	let t9;
	let current;
	let dispose;
	add_render_callback(/*onwindowscroll*/ ctx[2]);

	const navbar = new Navbar({
			props: { title: "Steam Guard" },
			$$inline: true
		});

	const steamguard = new SteamGuard({ $$inline: true });
	let each_value = [0, 1, 2, 3, 4, 5, 6, 7, 8];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < 9; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const tabbar = new Tabbar({ props: { location: 3 }, $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			create_component(navbar.$$.fragment);
			t1 = space();
			div0 = element("div");
			create_component(steamguard.$$.fragment);
			t2 = space();
			a = element("a");

			for (let i = 0; i < 9; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			div2 = element("div");
			span = element("span");
			t4 = text("scroll down");
			t5 = space();
			div1 = element("div");
			t6 = text("You have scrolled ");
			t7 = text(/*y*/ ctx[0]);
			t8 = text(" pixels");
			t9 = space();
			create_component(tabbar.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-uh0s2l\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			claim_component(navbar.$$.fragment, nodes);
			t1 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { id: true, class: true });
			var div0_nodes = children(div0);
			claim_component(steamguard.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			a = claim_element(nodes, "A", { class: true, href: true });
			var a_nodes = children(a);

			for (let i = 0; i < 9; i += 1) {
				each_blocks[i].l(a_nodes);
			}

			a_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			span = claim_element(div2_nodes, "SPAN", { style: true, class: true });
			var span_nodes = children(span);
			t4 = claim_text(span_nodes, "scroll down");
			span_nodes.forEach(detach_dev);
			t5 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t6 = claim_text(div1_nodes, "You have scrolled ");
			t7 = claim_text(div1_nodes, /*y*/ ctx[0]);
			t8 = claim_text(div1_nodes, " pixels");
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t9 = claim_space(nodes);
			claim_component(tabbar.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Guard :: Steam Mobile";
			attr_dev(div0, "id", "guard");
			attr_dev(div0, "class", "svelte-f74ee6");
			add_location(div0, file$1, 15, 0, 335);
			attr_dev(a, "class", "parallax-container svelte-f74ee6");
			attr_dev(a, "href", "https://www.firewatchgame.com");
			add_location(a, file$1, 20, 0, 410);
			set_style(span, "opacity", 1 - Math.max(0, /*y*/ ctx[0] / 40));
			attr_dev(span, "class", "svelte-f74ee6");
			add_location(span, file$1, 31, 1, 749);
			attr_dev(div1, "class", "foreground svelte-f74ee6");
			add_location(div1, file$1, 35, 1, 824);
			attr_dev(div2, "class", "text svelte-f74ee6");
			add_location(div2, file$1, 30, 0, 729);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, t0, anchor);
			mount_component(navbar, target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, div0, anchor);
			mount_component(steamguard, div0, null);
			insert_dev(target, t2, anchor);
			insert_dev(target, a, anchor);

			for (let i = 0; i < 9; i += 1) {
				each_blocks[i].m(a, null);
			}

			insert_dev(target, t3, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, span);
			append_dev(span, t4);
			append_dev(div2, t5);
			append_dev(div2, div1);
			append_dev(div1, t6);
			append_dev(div1, t7);
			append_dev(div1, t8);
			insert_dev(target, t9, anchor);
			mount_component(tabbar, target, anchor);
			current = true;
			if (remount) dispose();

			dispose = listen_dev(window, "scroll", () => {
				scrolling = true;
				clearTimeout(scrolling_timeout);
				scrolling_timeout = setTimeout(clear_scrolling, 100);
				/*onwindowscroll*/ ctx[2]();
			});
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*y*/ 1 && !scrolling) {
				scrolling = true;
				clearTimeout(scrolling_timeout);
				scrollTo(window.pageXOffset, /*y*/ ctx[0]);
				scrolling_timeout = setTimeout(clear_scrolling, 100);
			}

			if (dirty & /*y, layers*/ 3) {
				each_value = [0, 1, 2, 3, 4, 5, 6, 7, 8];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < 9; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(a, null);
					}
				}

				for (; i < 9; i += 1) {
					each_blocks[i].d(1);
				}
			}

			if (!current || dirty & /*y*/ 1) {
				set_style(span, "opacity", 1 - Math.max(0, /*y*/ ctx[0] / 40));
			}

			if (!current || dirty & /*y*/ 1) set_data_dev(t7, /*y*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navbar.$$.fragment, local);
			transition_in(steamguard.$$.fragment, local);
			transition_in(tabbar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navbar.$$.fragment, local);
			transition_out(steamguard.$$.fragment, local);
			transition_out(tabbar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			destroy_component(navbar, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div0);
			destroy_component(steamguard);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(a);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div2);
			if (detaching) detach_dev(t9);
			destroy_component(tabbar, detaching);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	const layers = [0, 1, 2, 3, 4, 5, 6, 7, 8];
	let y;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);

	function onwindowscroll() {
		$$invalidate(0, y = window.pageYOffset);
	}

	$$self.$capture_state = () => ({ Navbar, Tabbar, SteamGuard, layers, y });

	$$self.$inject_state = $$props => {
		if ("y" in $$props) $$invalidate(0, y = $$props.y);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [y, layers, onwindowscroll];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$1.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMDlhMDI2Y2QuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1N0ZWFtR3VhcmQuc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL3JvdXRlcy9pbmRleC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cblx0aW1wb3J0IHsgb25EZXN0cm95IH0gZnJvbSAnc3ZlbHRlJztcblx0aW1wb3J0IHsgdXNlcm5hbWUgfSBmcm9tICcuLi9yb3V0ZXMvc3RvcmVzLmpzJztcblxuXHRsZXQgY29kZSA9IDcyODI2O1xuXHRsZXQgcGVyY2VudGFnZSA9IDA7XG5cblx0ZnVuY3Rpb24gb25JbnRlcnZhbChjYWxsYmFjaywgdGltZSkge1xuXHRcdGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoY2FsbGJhY2ssIHRpbWUpO1xuXG5cdFx0b25EZXN0cm95KCgpID0+IHtcblx0XHRjbGVhckludGVydmFsKGludGVydmFsKTtcblx0XHR9KTtcblx0fTtcblxuXHRmdW5jdGlvbiBjb2RlZ2VuKCkge1xuXHRcdGNvZGUgPSAoIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKC01KSApLnRvVXBwZXJDYXNlKCk7XG5cdH1cblx0XG5cdG9uSW50ZXJ2YWwoXG5cdFx0ZnVuY3Rpb24gY2hlY2soKXtcblx0XHRcdGlmIChwZXJjZW50YWdlIDwgOSl7XG5cdFx0XHRcdCsrcGVyY2VudGFnZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHBlcmNlbnRhZ2UgPSAwO1xuXHRcdFx0XHRjb2RlZ2VuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHQsIDEwMDApO1xuXG5cdGxldCB1c2VybmFtZV92YWx1ZTtcblxuXHRjb25zdCB1bnN1YnNjcmliZSA9IHVzZXJuYW1lLnN1YnNjcmliZSh2YWx1ZSA9PiB7XG5cdFx0dXNlcm5hbWVfdmFsdWUgPSB2YWx1ZTtcblx0fSk7XG5cbjwvc2NyaXB0PlxuPGRpdiBpZD1cIndyYXBwZXJcIj5cblx0PGRpdiBpZD1cInRpbWVyYmFyXCIgc3R5bGU9XCJ3aWR0aDogezEwMCAtIHBlcmNlbnRhZ2UqMTB9JTsgYmFja2dyb3VuZC1pbWFnZToge3BlcmNlbnRhZ2UgPj03ID8gJ2xpbmVhci1ncmFkaWVudCgxNDVkZWcsIHJnYmEoMTczLDQwLDMzLDEpIDAlLCByZ2JhKDE3Myw0MCwzMywxKSAxMDAlKScgOiAnbGluZWFyLWdyYWRpZW50KDE0NWRlZywgcmdiYSgwLDAsMjU1LDEpIDAlLCByZ2JhKDE2Myw2OCwyMDEsMSkgMTAwJSknfTtcIj48L2Rpdj5cblx0PGRpdiBpZD1cImNvZGVcIiBzdHlsZT1cImNvbG9yOiB7cGVyY2VudGFnZSA+PTcgPyAnI0FEMjgyMScgOiAnd2hpdGUnfVwiPntjb2RlfTwvZGl2PlxuXHQ8ZGl2IGlkPVwidXNlcm5hbWVcIj57dXNlcm5hbWVfdmFsdWV9PC9kaXY+XG48L2Rpdj5cbjxzdHlsZT5cblx0I3dyYXBwZXJ7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdGhlaWdodDogMTkwcHg7XG5cdFx0cGFkZGluZy10b3A6IDQwcHg7XG5cdH1cblxuXHQjY29kZSB7XG5cdFx0Zm9udC1zaXplOiA1MnB4O1xuXHRcdGZvbnQtd2VpZ2h0OiA0MDA7XG5cdFx0dGV4dC1hbGlnbjogY2VudGVyO1xuXHRcdGxldHRlci1zcGFjaW5nOiA0cHg7XG5cdFx0dHJhbnNpdGlvbjogMC41cztcblx0fVxuXG5cdCN1c2VybmFtZSB7XG5cdFx0Y29sb3I6ICNhN2Q2ZjA7XG5cdFx0Zm9udC1zaXplOiAxNHB4O1xuXHRcdG9wYWNpdHk6IDAuODtcblx0fVxuXG5cdCN0aW1lcmJhciB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHJpZ2h0OiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgIG1pbi1oZWlnaHQ6IDhweDtcbiAgICB0b3A6IDkwcHg7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjgpO1xuICAgIHRyYW5zaXRpb246IDAuNXM7XG5cdH1cbjwvc3R5bGU+XG4iLCI8c2NyaXB0PlxuXHRpbXBvcnQgTmF2YmFyIGZyb20gJy4uL2NvbXBvbmVudHMvTmF2YmFyLnN2ZWx0ZSc7XG5cdGltcG9ydCBUYWJiYXIgZnJvbSAnLi4vY29tcG9uZW50cy9UYWJiYXIuc3ZlbHRlJztcblx0aW1wb3J0IFN0ZWFtR3VhcmQgZnJvbSAnLi4vY29tcG9uZW50cy9TdGVhbUd1YXJkLnN2ZWx0ZSc7XG5cblx0Y29uc3QgbGF5ZXJzID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDhdO1xuXG5cdGxldCB5O1xuPC9zY3JpcHQ+XG5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPkd1YXJkIDo6IFN0ZWFtIE1vYmlsZTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48TmF2YmFyIHRpdGxlPVwiU3RlYW0gR3VhcmRcIiAvPlxuPGRpdiBpZD1cImd1YXJkXCI+XG5cdDxTdGVhbUd1YXJkIC8+XG48L2Rpdj5cbjxzdmVsdGU6d2luZG93IGJpbmQ6c2Nyb2xsWT17eX0vPlxuXG48YSBjbGFzcz1cInBhcmFsbGF4LWNvbnRhaW5lclwiIGhyZWY9XCJodHRwczovL3d3dy5maXJld2F0Y2hnYW1lLmNvbVwiPlxuXHR7I2VhY2ggWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDhdIGFzIGxheWVyfVxuXHRcdDxpbWdcblx0XHRcdHN0eWxlPVwidHJhbnNmb3JtOiB0cmFuc2xhdGUoMCx7LXkgKiBsYXllciAvIChsYXllcnMubGVuZ3RoIC0gMSl9cHgpXCJcblx0XHRcdHNyYz1cImh0dHBzOi8vd3d3LmZpcmV3YXRjaGdhbWUuY29tL2ltYWdlcy9wYXJhbGxheC9wYXJhbGxheHtsYXllcn0ucG5nXCJcblx0XHRcdGFsdD1cInBhcmFsbGF4IGxheWVyIHtsYXllcn1cIlxuXHRcdD5cblx0ey9lYWNofVxuPC9hPlxuXG48ZGl2IGNsYXNzPVwidGV4dFwiPlxuXHQ8c3BhbiBzdHlsZT1cIm9wYWNpdHk6IHsxIC0gTWF0aC5tYXgoMCwgeSAvIDQwKX1cIj5cblx0XHRzY3JvbGwgZG93blxuXHQ8L3NwYW4+XG5cblx0PGRpdiBjbGFzcz1cImZvcmVncm91bmRcIj5cblx0XHRZb3UgaGF2ZSBzY3JvbGxlZCB7eX0gcGl4ZWxzXG5cdDwvZGl2PlxuPC9kaXY+XG5cbjxUYWJiYXIgbG9jYXRpb249ezN9IC8+XG5cbjxzdHlsZT5cblx0I2d1YXJkIHtcblx0XHRwYWRkaW5nOiA2MHB4IDBweDtcblx0XHRwYWRkaW5nLWJvdHRvbTogNjBweDtcblx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdH1cblxuXHRwYXJhbGxheC1jb250YWluZXIge1xuXHRcdHBvc2l0aW9uOiBmaXhlZDtcblx0XHR3aWR0aDogMjQwMHB4O1xuXHRcdGhlaWdodDogNzEycHg7XG5cdFx0bGVmdDogNTAlO1xuXHRcdHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsMCk7XG5cdH1cblxuXHQucGFyYWxsYXgtY29udGFpbmVyIGltZyB7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHRvcDogMDtcblx0XHRsZWZ0OiAwO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XG5cdH1cblxuXHQucGFyYWxsYXgtY29udGFpbmVyIGltZzpsYXN0LWNoaWxkOjphZnRlciB7XG5cdFx0Y29udGVudDogJyc7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdGhlaWdodDogMTAwJTtcblx0XHRiYWNrZ3JvdW5kOiByZ2IoNDUsMTAsMTMpO1xuXHR9XG5cblx0LnRleHQge1xuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHR3aWR0aDogMTAwJTtcblx0XHRoZWlnaHQ6IDMwMHZoO1xuXHRcdGNvbG9yOiByZ2IoMjIwLDExMyw0Myk7XG5cdFx0dGV4dC1hbGlnbjogY2VudGVyO1xuXHRcdHBhZGRpbmc6IDRlbSAwLjVlbSAwLjVlbSAwLjVlbTtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXHR9XG5cblx0c3BhbiB7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0Zm9udC1zaXplOiAxZW07XG5cdFx0dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcblx0XHR3aWxsLWNoYW5nZTogdHJhbnNmb3JtLCBvcGFjaXR5O1xuXHR9XG5cblx0LmZvcmVncm91bmQge1xuXHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHR0b3A6IDcxMXB4O1xuXHRcdGxlZnQ6IDA7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0aGVpZ2h0OiBjYWxjKDEwMCUgLSA3MTJweCk7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogcmdiKDMyLDAsMSk7XG5cdFx0Y29sb3I6IHdoaXRlO1xuXHRcdHBhZGRpbmc6IDUwdmggMCAwIDA7XG5cdH1cblxuPC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztzQkF1Q3VFLEdBQUk7OztnQ0FDdEQsR0FBYzs7Ozs7Ozs7Ozs7d0NBRG9DLEdBQUk7Ozs7O2tEQUN0RCxHQUFjOzs7Ozs7OzRCQUZBLEdBQUcsa0JBQUcsR0FBVSxNQUFDLEVBQUU7O3NEQUF1QixHQUFVLE9BQUcsQ0FBQztLQUFHLHVFQUF1RTtLQUFHLHNFQUFzRTs7Ozs7MkNBQy9NLEdBQVUsT0FBRyxDQUFDLEdBQUcsU0FBUyxHQUFHLE9BQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBRGhDLEdBQUcsa0JBQUcsR0FBVSxNQUFDLEVBQUU7Ozs7dURBQXVCLEdBQVUsT0FBRyxDQUFDO01BQUcsdUVBQXVFO01BQUcsc0VBQXNFOzs7cURBQ3ZLLEdBQUk7Ozs0Q0FBNUMsR0FBVSxPQUFHLENBQUMsR0FBRyxTQUFTLEdBQUcsT0FBTzs7O3lFQUM5QyxHQUFjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FwQzlCLElBQUksR0FBRyxLQUFLO0tBQ1osVUFBVSxHQUFHLENBQUM7O1VBRVQsVUFBVSxDQUFDLFFBQVEsRUFBRSxJQUFJO1FBQzNCLFFBQVEsR0FBRyxXQUFXLENBQUMsUUFBUSxFQUFFLElBQUk7O0VBRTNDLFNBQVM7R0FDVCxhQUFhLENBQUMsUUFBUTs7Ozs7O1VBSWQsT0FBTztrQkFDZixJQUFJLEdBQUssSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUksV0FBVzs7O0NBRzVELFVBQVU7V0FDQSxLQUFLO09BQ1QsVUFBVSxHQUFHLENBQUM7c0JBQ2YsVUFBVTs7b0JBRVosVUFBVSxHQUFHLENBQUM7SUFDZCxPQUFPOzs7RUFHUixJQUFJOzs7S0FFRixjQUFjOztPQUVaLFdBQVcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUs7a0JBQzNDLGNBQWMsR0FBRyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dURDVlcsR0FBQyxnQkFBRyxHQUFLLGtCQUFJLEdBQU0sSUFBQyxNQUFNLEdBQUcsQ0FBQzt5R0FDRixHQUFLO3NFQUM1QyxHQUFLOzs7Ozs7Ozs7d0RBRk0sR0FBQyxnQkFBRyxHQUFLLGtCQUFJLEdBQU0sSUFBQyxNQUFNLEdBQUcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQkFGeEQsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDOzs7Ozs7OztnREFtQmhCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21CQUpFLEdBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxQ0FBRCxHQUFDOzs7Ozs7Ozs7Ozs7Ozs7OzhCQUxFLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBRSxHQUFDLE1BQUcsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tCQVZyQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBVVYsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFFLEdBQUMsTUFBRyxFQUFFOzs7MkRBS3pCLEdBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BL0JmLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7S0FFckMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
