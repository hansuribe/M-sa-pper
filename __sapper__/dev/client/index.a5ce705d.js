import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, a as add_render_callback, v as validate_slots, o as onDestroy, g as globals, e as element, b as space, t as text, c as claim_element, f as children, h as detach_dev, j as claim_space, k as claim_text, l as attr_dev, m as set_style, n as add_location, p as insert_dev, q as append_dev, r as listen_dev, u as set_data_dev, w as noop, x as create_component, y as query_selector_all, z as claim_component, A as mount_component, B as transition_in, C as transition_out, D as destroy_component } from './client.d667278b.js';
import { N as Navbar, T as Tabbar } from './Tabbar.af1dbc64.js';
import { u as username } from './stores.addd99e7.js';

/* src/components/SteamGuard.svelte generated by Svelte v3.22.2 */

const { console: console_1 } = globals;
const file = "src/components/SteamGuard.svelte";

function create_fragment(ctx) {
	let scrolling = false;

	let clear_scrolling = () => {
		scrolling = false;
	};

	let scrolling_timeout;
	let div3;
	let div0;
	let t0;
	let div1;
	let t1;
	let t2;
	let div2;
	let t3;
	let dispose;
	add_render_callback(/*onwindowscroll*/ ctx[8]);

	const block = {
		c: function create() {
			div3 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = text(/*code*/ ctx[0]);
			t2 = space();
			div2 = element("div");
			t3 = text(/*username_value*/ ctx[3]);
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { id: true, class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { id: true, style: true, class: true });
			children(div0).forEach(detach_dev);
			t0 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { id: true, style: true, class: true });
			var div1_nodes = children(div1);
			t1 = claim_text(div1_nodes, /*code*/ ctx[0]);
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { id: true, class: true });
			var div2_nodes = children(div2);
			t3 = claim_text(div2_nodes, /*username_value*/ ctx[3]);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "id", "timerbar");
			set_style(div0, "width", 100 - /*percentage*/ ctx[1] * 10 + "%");

			set_style(div0, "background-image", /*percentage*/ ctx[1] >= 7
			? "linear-gradient(145deg, rgba(173,40,33,1) 0%, rgba(173,40,33,1) 100%)"
			: "linear-gradient(145deg, rgba(0,0,255,1) 0%, rgba(163,68,201,1) 100%)");

			attr_dev(div0, "class", "svelte-1knroi1");
			add_location(div0, file, 43, 1, 763);
			attr_dev(div1, "id", "code");
			set_style(div1, "color", /*percentage*/ ctx[1] >= 7 ? "#AD2821" : "white");
			attr_dev(div1, "class", "svelte-1knroi1");
			add_location(div1, file, 44, 1, 1012);
			attr_dev(div2, "id", "username");
			attr_dev(div2, "class", "svelte-1knroi1");
			add_location(div2, file, 45, 1, 1095);
			attr_dev(div3, "id", "wrapper");
			attr_dev(div3, "class", "svelte-1knroi1");
			add_location(div3, file, 42, 0, 743);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			append_dev(div3, t0);
			append_dev(div3, div1);
			append_dev(div1, t1);
			append_dev(div3, t2);
			append_dev(div3, div2);
			append_dev(div2, t3);
			if (remount) dispose();

			dispose = listen_dev(window, "scroll", () => {
				scrolling = true;
				clearTimeout(scrolling_timeout);
				scrolling_timeout = setTimeout(clear_scrolling, 100);
				/*onwindowscroll*/ ctx[8]();
			});
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*y*/ 4 && !scrolling) {
				scrolling = true;
				clearTimeout(scrolling_timeout);
				scrollTo(window.pageXOffset, /*y*/ ctx[2]);
				scrolling_timeout = setTimeout(clear_scrolling, 100);
			}

			if (dirty & /*percentage*/ 2) {
				set_style(div0, "width", 100 - /*percentage*/ ctx[1] * 10 + "%");
			}

			if (dirty & /*percentage*/ 2) {
				set_style(div0, "background-image", /*percentage*/ ctx[1] >= 7
				? "linear-gradient(145deg, rgba(173,40,33,1) 0%, rgba(173,40,33,1) 100%)"
				: "linear-gradient(145deg, rgba(0,0,255,1) 0%, rgba(163,68,201,1) 100%)");
			}

			if (dirty & /*code*/ 1) set_data_dev(t1, /*code*/ ctx[0]);

			if (dirty & /*percentage*/ 2) {
				set_style(div1, "color", /*percentage*/ ctx[1] >= 7 ? "#AD2821" : "white");
			}

			if (dirty & /*username_value*/ 8) set_data_dev(t3, /*username_value*/ ctx[3]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let code = 72826;
	let percentage = 0;
	const layers = [0, 1, 2, 3, 4, 5, 6, 7, 8];
	let y;
	console.log(y);

	function onInterval(callback, time) {
		const interval = setInterval(callback, time);

		onDestroy(() => {
			clearInterval(interval);
		});
	}

	

	function codegen() {
		$$invalidate(0, code = Math.random().toString(36).slice(-5).toUpperCase());
	}

	onInterval(
		function check() {
			if (percentage < 9) {
				$$invalidate(1, ++percentage);
			} else {
				$$invalidate(1, percentage = 0);
				codegen();
			}
		},
		1000
	);

	let username_value;

	const unsubscribe = username.subscribe(value => {
		$$invalidate(3, username_value = value);
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<SteamGuard> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("SteamGuard", $$slots, []);

	function onwindowscroll() {
		$$invalidate(2, y = window.pageYOffset);
	}

	$$self.$capture_state = () => ({
		onDestroy,
		username,
		code,
		percentage,
		layers,
		y,
		onInterval,
		codegen,
		username_value,
		unsubscribe
	});

	$$self.$inject_state = $$props => {
		if ("code" in $$props) $$invalidate(0, code = $$props.code);
		if ("percentage" in $$props) $$invalidate(1, percentage = $$props.percentage);
		if ("y" in $$props) $$invalidate(2, y = $$props.y);
		if ("username_value" in $$props) $$invalidate(3, username_value = $$props.username_value);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		code,
		percentage,
		y,
		username_value,
		layers,
		onInterval,
		codegen,
		unsubscribe,
		onwindowscroll
	];
}

class SteamGuard extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SteamGuard",
			options,
			id: create_fragment.name
		});
	}
}

/* src/routes/index.svelte generated by Svelte v3.22.2 */
const file$1 = "src/routes/index.svelte";

function create_fragment$1(ctx) {
	let t0;
	let t1;
	let div1;
	let t2;
	let div0;
	let t3;
	let t4;
	let current;

	const navbar = new Navbar({
			props: { title: "Steam Guard" },
			$$inline: true
		});

	const steamguard = new SteamGuard({ $$inline: true });
	const tabbar = new Tabbar({ props: { location: 3 }, $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			create_component(navbar.$$.fragment);
			t1 = space();
			div1 = element("div");
			create_component(steamguard.$$.fragment);
			t2 = space();
			div0 = element("div");
			t3 = text("sfsdf");
			t4 = space();
			create_component(tabbar.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-uh0s2l\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			claim_component(navbar.$$.fragment, nodes);
			t1 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);
			claim_component(steamguard.$$.fragment, div1_nodes);
			t2 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { style: true });
			var div0_nodes = children(div0);
			t3 = claim_text(div0_nodes, "sfsdf");
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			claim_component(tabbar.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Guard :: Steam Mobile";
			set_style(div0, "height", "2000px");
			add_location(div0, file$1, 13, 1, 314);
			attr_dev(div1, "id", "guard");
			attr_dev(div1, "class", "svelte-qfrmoq");
			add_location(div1, file$1, 11, 0, 280);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			mount_component(navbar, target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, div1, anchor);
			mount_component(steamguard, div1, null);
			append_dev(div1, t2);
			append_dev(div1, div0);
			append_dev(div0, t3);
			insert_dev(target, t4, anchor);
			mount_component(tabbar, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(navbar.$$.fragment, local);
			transition_in(steamguard.$$.fragment, local);
			transition_in(tabbar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navbar.$$.fragment, local);
			transition_out(steamguard.$$.fragment, local);
			transition_out(tabbar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			destroy_component(navbar, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div1);
			destroy_component(steamguard);
			if (detaching) detach_dev(t4);
			destroy_component(tabbar, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);
	$$self.$capture_state = () => ({ Navbar, Tabbar, SteamGuard });
	return [];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$1.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYTVjZTcwNWQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1N0ZWFtR3VhcmQuc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL3JvdXRlcy9pbmRleC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cblx0aW1wb3J0IHsgb25EZXN0cm95IH0gZnJvbSAnc3ZlbHRlJztcblx0aW1wb3J0IHsgdXNlcm5hbWUgfSBmcm9tICcuLi9yb3V0ZXMvc3RvcmVzLmpzJztcblxuXHRsZXQgY29kZSA9IDcyODI2O1xuXHRsZXQgcGVyY2VudGFnZSA9IDA7XG5cblx0Y29uc3QgbGF5ZXJzID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDhdO1xuICAgIGxldCB5O1xuICAgIGNvbnNvbGUubG9nKHkpO1xuXG5cdGZ1bmN0aW9uIG9uSW50ZXJ2YWwoY2FsbGJhY2ssIHRpbWUpIHtcblx0XHRjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKGNhbGxiYWNrLCB0aW1lKTtcblxuXHRcdG9uRGVzdHJveSgoKSA9PiB7XG5cdFx0Y2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG5cdFx0fSk7XG5cdH07XG5cblx0ZnVuY3Rpb24gY29kZWdlbigpIHtcblx0XHRjb2RlID0gKCBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgtNSkgKS50b1VwcGVyQ2FzZSgpO1xuXHR9XG5cdFxuXHRvbkludGVydmFsKFxuXHRcdGZ1bmN0aW9uIGNoZWNrKCl7XG5cdFx0XHRpZiAocGVyY2VudGFnZSA8IDkpe1xuXHRcdFx0XHQrK3BlcmNlbnRhZ2U7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwZXJjZW50YWdlID0gMDtcblx0XHRcdFx0Y29kZWdlbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0LCAxMDAwKTtcblxuXHRsZXQgdXNlcm5hbWVfdmFsdWU7XG5cblx0Y29uc3QgdW5zdWJzY3JpYmUgPSB1c2VybmFtZS5zdWJzY3JpYmUodmFsdWUgPT4ge1xuXHRcdHVzZXJuYW1lX3ZhbHVlID0gdmFsdWU7XG5cdH0pO1xuXG48L3NjcmlwdD5cbjxzdmVsdGU6d2luZG93IGJpbmQ6c2Nyb2xsWT17eX0vPlxuPGRpdiBpZD1cIndyYXBwZXJcIj5cblx0PGRpdiBpZD1cInRpbWVyYmFyXCIgc3R5bGU9XCJ3aWR0aDogezEwMCAtIHBlcmNlbnRhZ2UqMTB9JTsgYmFja2dyb3VuZC1pbWFnZToge3BlcmNlbnRhZ2UgPj03ID8gJ2xpbmVhci1ncmFkaWVudCgxNDVkZWcsIHJnYmEoMTczLDQwLDMzLDEpIDAlLCByZ2JhKDE3Myw0MCwzMywxKSAxMDAlKScgOiAnbGluZWFyLWdyYWRpZW50KDE0NWRlZywgcmdiYSgwLDAsMjU1LDEpIDAlLCByZ2JhKDE2Myw2OCwyMDEsMSkgMTAwJSknfTtcIj48L2Rpdj5cblx0PGRpdiBpZD1cImNvZGVcIiBzdHlsZT1cImNvbG9yOiB7cGVyY2VudGFnZSA+PTcgPyAnI0FEMjgyMScgOiAnd2hpdGUnfVwiPntjb2RlfTwvZGl2PlxuXHQ8ZGl2IGlkPVwidXNlcm5hbWVcIj57dXNlcm5hbWVfdmFsdWV9PC9kaXY+XG48L2Rpdj5cblxuPHN0eWxlPlxuXHQjd3JhcHBlcntcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAjMTYxYzJkO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdGhlaWdodDogMTQ1cHg7XG5cdFx0cGFkZGluZy10b3A6IDQwcHg7XG5cdFx0b3ZlcmZsb3c6IGhpZGRlbjtcblx0fVxuXG5cdCNjb2RlIHtcblx0XHRmb250LXNpemU6IDUycHg7XG5cdFx0Zm9udC13ZWlnaHQ6IDQwMDtcblx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdFx0bGV0dGVyLXNwYWNpbmc6IDRweDtcblx0XHR0cmFuc2l0aW9uOiAwLjVzO1xuXHR9XG5cblx0I3VzZXJuYW1lIHtcblx0XHRjb2xvcjogI2E3ZDZmMDtcblx0XHRmb250LXNpemU6IDE0cHg7XG5cdFx0b3BhY2l0eTogMC44O1xuXHR9XG5cblx0I3RpbWVyYmFyIHtcblx0ICAgIHBvc2l0aW9uOiBmaXhlZDtcblx0ICAgIHJpZ2h0OiAwO1xuXHQgICAgbGVmdDogMDtcblx0ICAgIG1hcmdpbi1yaWdodDogYXV0bztcblx0ICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuXHQgICAgbWluLWhlaWdodDogOHB4O1xuXHQgICAgdG9wOiA5MHB4O1xuXHQgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjgpO1xuXHQgICAgdHJhbnNpdGlvbjogMC41cztcblx0fVxuXG5cdC5wYXJhbGxheC1jb250YWluZXIge1xuXHRcdHBvc2l0aW9uOiBmaXhlZDtcblx0XHR3aWR0aDogMjQwMHB4O1xuXHRcdGhlaWdodDogNzEycHg7XG5cdFx0bGVmdDogNTAlO1xuXHRcdHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsMCk7XG5cdFx0dG9wOiAtMTAwcHg7XG5cdH1cblxuXHQucGFyYWxsYXgtY29udGFpbmVyIGltZyB7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHRvcDogMDtcblx0XHRsZWZ0OiAwO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XG5cdH1cblxuXHQucGFyYWxsYXgtY29udGFpbmVyIGltZzpsYXN0LWNoaWxkOjphZnRlciB7XG5cdFx0Y29udGVudDogJyc7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdGhlaWdodDogMTAwJTtcblx0XHRiYWNrZ3JvdW5kOiByZ2IoNDUsMTAsMTMpO1xuXHR9XG5cblx0LnRleHQge1xuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHR3aWR0aDogMTAwJTtcblx0XHRoZWlnaHQ6IDMwMHZoO1xuXHRcdGNvbG9yOiByZ2IoMjIwLDExMyw0Myk7XG5cdFx0dGV4dC1hbGlnbjogY2VudGVyO1xuXHRcdHBhZGRpbmc6IDRlbSAwLjVlbSAwLjVlbSAwLjVlbTtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXHR9XG5cblx0c3BhbiB7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0Zm9udC1zaXplOiAxZW07XG5cdFx0dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcblx0XHR3aWxsLWNoYW5nZTogdHJhbnNmb3JtLCBvcGFjaXR5O1xuXHR9XG5cblx0LmZvcmVncm91bmQge1xuXHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHR0b3A6IDcxMXB4O1xuXHRcdGxlZnQ6IDA7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0aGVpZ2h0OiBjYWxjKDEwMCUgLSA3MTJweCk7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogcmdiKDMyLDAsMSk7XG5cdFx0Y29sb3I6IHdoaXRlO1xuXHRcdHBhZGRpbmc6IDUwdmggMCAwIDA7XG5cdH1cblxuXHQ6Z2xvYmFsKGJvZHkpIHtcblx0XHRtYXJnaW46IDA7XG5cdFx0cGFkZGluZzogMDtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjUzLCAxNzQsIDUxKTtcblx0fVxuPC9zdHlsZT5cbiIsIjxzY3JpcHQ+XG5cdGltcG9ydCBOYXZiYXIgZnJvbSAnLi4vY29tcG9uZW50cy9OYXZiYXIuc3ZlbHRlJztcblx0aW1wb3J0IFRhYmJhciBmcm9tICcuLi9jb21wb25lbnRzL1RhYmJhci5zdmVsdGUnO1xuXHRpbXBvcnQgU3RlYW1HdWFyZCBmcm9tICcuLi9jb21wb25lbnRzL1N0ZWFtR3VhcmQuc3ZlbHRlJztcbjwvc2NyaXB0PlxuXG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5HdWFyZCA6OiBTdGVhbSBNb2JpbGU8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPE5hdmJhciB0aXRsZT1cIlN0ZWFtIEd1YXJkXCIgLz5cbjxkaXYgaWQ9XCJndWFyZFwiPlxuXHQ8U3RlYW1HdWFyZCAvPlxuXHQ8ZGl2IHN0eWxlPVwiaGVpZ2h0OiAyMDAwcHhcIj5zZnNkZjwvZGl2PlxuPC9kaXY+XG48VGFiYmFyIGxvY2F0aW9uPXszfSAvPlxuXG48c3R5bGU+XG5cdCNndWFyZCB7XG5cdFx0cGFkZGluZzogNjBweCAwcHg7XG5cdFx0cGFkZGluZy1ib3R0b206IDYwcHg7XG5cdFx0dGV4dC1hbGlnbjogY2VudGVyO1xuXHR9XG48L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0JBNEN1RSxHQUFJOzs7Z0NBQ3RELEdBQWM7Ozs7Ozs7Ozs7O3dDQURvQyxHQUFJOzs7OztrREFDdEQsR0FBYzs7Ozs7Ozs0QkFGQSxHQUFHLGtCQUFHLEdBQVUsTUFBQyxFQUFFOztzREFBdUIsR0FBVSxPQUFHLENBQUM7S0FBRyx1RUFBdUU7S0FBRyxzRUFBc0U7Ozs7OzJDQUMvTSxHQUFVLE9BQUcsQ0FBQyxHQUFHLFNBQVMsR0FBRyxPQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZCQURoQyxHQUFHLGtCQUFHLEdBQVUsTUFBQyxFQUFFOzs7O3VEQUF1QixHQUFVLE9BQUcsQ0FBQztNQUFHLHVFQUF1RTtNQUFHLHNFQUFzRTs7O3FEQUN2SyxHQUFJOzs7NENBQTVDLEdBQVUsT0FBRyxDQUFDLEdBQUcsU0FBUyxHQUFHLE9BQU87Ozt5RUFDOUMsR0FBYzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXpDOUIsSUFBSSxHQUFHLEtBQUs7S0FDWixVQUFVLEdBQUcsQ0FBQztPQUVaLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7S0FDbEMsQ0FBQztDQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7VUFFUCxVQUFVLENBQUMsUUFBUSxFQUFFLElBQUk7UUFDM0IsUUFBUSxHQUFHLFdBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSTs7RUFFM0MsU0FBUztHQUNULGFBQWEsQ0FBQyxRQUFROzs7Ozs7VUFJZCxPQUFPO2tCQUNmLElBQUksR0FBSyxJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBSSxXQUFXOzs7Q0FHNUQsVUFBVTtXQUNBLEtBQUs7T0FDVCxVQUFVLEdBQUcsQ0FBQztzQkFDZixVQUFVOztvQkFFWixVQUFVLEdBQUcsQ0FBQztJQUNkLE9BQU87OztFQUdSLElBQUk7OztLQUVGLGNBQWM7O09BRVosV0FBVyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSztrQkFDM0MsY0FBYyxHQUFHLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dEQ3RCTixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
