import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, t as text, h as claim_element, j as children, k as claim_text, b as detach_dev, l as attr_dev, m as add_location, z as set_style, n as insert_dev, p as append_dev, y as set_data_dev, r as noop, a as space, c as create_component, f as claim_space, g as claim_component, o as mount_component, u as transition_in, w as transition_out, x as destroy_component, q as query_selector_all } from './client.262cfc95.js';
import { N as Navbar, T as Tabbar } from './Tabbar.2b018759.js';

/* src/components/RecentChat.svelte generated by Svelte v3.22.2 */

const file = "src/components/RecentChat.svelte";

function create_fragment(ctx) {
	let div1;
	let div0;
	let t;
	let div0_class_value;
	let div1_class_value;

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			t = text(/*name*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { id: true, class: true, style: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { id: true, class: true });
			var div0_nodes = children(div0);
			t = claim_text(div0_nodes, /*name*/ ctx[2]);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "id", "name");
			attr_dev(div0, "class", div0_class_value = "" + ((/*status*/ ctx[1] === 1 ? "name--ingame" : "") + (/*status*/ ctx[1] === 2 ? "name--online" : "") + (/*status*/ ctx[1] === 3 ? "status offline" : "") + " svelte-rf5a4b"));
			add_location(div0, file, 8, 181, 303);
			attr_dev(div1, "id", "imageholder");
			attr_dev(div1, "class", div1_class_value = "" + ((/*status*/ ctx[1] === 1 ? "status ingame" : "") + (/*status*/ ctx[1] === 2 ? "status online" : "") + (/*status*/ ctx[1] === 3 ? "status offline" : "") + " svelte-rf5a4b"));
			set_style(div1, "background-image", "url(" + /*image*/ ctx[0] + ")");
			add_location(div1, file, 8, 0, 122);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, t);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*name*/ 4) set_data_dev(t, /*name*/ ctx[2]);

			if (dirty & /*status*/ 2 && div0_class_value !== (div0_class_value = "" + ((/*status*/ ctx[1] === 1 ? "name--ingame" : "") + (/*status*/ ctx[1] === 2 ? "name--online" : "") + (/*status*/ ctx[1] === 3 ? "status offline" : "") + " svelte-rf5a4b"))) {
				attr_dev(div0, "class", div0_class_value);
			}

			if (dirty & /*status*/ 2 && div1_class_value !== (div1_class_value = "" + ((/*status*/ ctx[1] === 1 ? "status ingame" : "") + (/*status*/ ctx[1] === 2 ? "status online" : "") + (/*status*/ ctx[1] === 3 ? "status offline" : "") + " svelte-rf5a4b"))) {
				attr_dev(div1, "class", div1_class_value);
			}

			if (dirty & /*image*/ 1) {
				set_style(div1, "background-image", "url(" + /*image*/ ctx[0] + ")");
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { image } = $$props, { status } = $$props, { name } = $$props;
	const writable_props = ["image", "status", "name"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<RecentChat> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("RecentChat", $$slots, []);

	$$self.$set = $$props => {
		if ("image" in $$props) $$invalidate(0, image = $$props.image);
		if ("status" in $$props) $$invalidate(1, status = $$props.status);
		if ("name" in $$props) $$invalidate(2, name = $$props.name);
	};

	$$self.$capture_state = () => ({ image, status, name });

	$$self.$inject_state = $$props => {
		if ("image" in $$props) $$invalidate(0, image = $$props.image);
		if ("status" in $$props) $$invalidate(1, status = $$props.status);
		if ("name" in $$props) $$invalidate(2, name = $$props.name);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [image, status, name];
}

class RecentChat extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { image: 0, status: 1, name: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "RecentChat",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*image*/ ctx[0] === undefined && !("image" in props)) {
			console.warn("<RecentChat> was created without expected prop 'image'");
		}

		if (/*status*/ ctx[1] === undefined && !("status" in props)) {
			console.warn("<RecentChat> was created without expected prop 'status'");
		}

		if (/*name*/ ctx[2] === undefined && !("name" in props)) {
			console.warn("<RecentChat> was created without expected prop 'name'");
		}
	}

	get image() {
		throw new Error("<RecentChat>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set image(value) {
		throw new Error("<RecentChat>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get status() {
		throw new Error("<RecentChat>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set status(value) {
		throw new Error("<RecentChat>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<RecentChat>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<RecentChat>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/RecentChats.svelte generated by Svelte v3.22.2 */
const file$1 = "src/components/RecentChats.svelte";

function create_fragment$1(ctx) {
	let div1;
	let h3;
	let t0;
	let t1;
	let div0;
	let t2;
	let t3;
	let t4;
	let current;

	const recentchat0 = new RecentChat({
			props: {
				image: "friendone.png",
				status: 1,
				name: "bingotheslayeer"
			},
			$$inline: true
		});

	const recentchat1 = new RecentChat({
			props: {
				image: "friendtwo.png",
				status: 2,
				name: "fatherdeath"
			},
			$$inline: true
		});

	const recentchat2 = new RecentChat({
			props: {
				image: "friendthree.png",
				status: 2,
				name: "pyschotherapist"
			},
			$$inline: true
		});

	const recentchat3 = new RecentChat({
			props: {
				image: "friendfour.png",
				status: 3,
				name: "fatfather64"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			h3 = element("h3");
			t0 = text("Recent Chats");
			t1 = space();
			div0 = element("div");
			create_component(recentchat0.$$.fragment);
			t2 = space();
			create_component(recentchat1.$$.fragment);
			t3 = space();
			create_component(recentchat2.$$.fragment);
			t4 = space();
			create_component(recentchat3.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { id: true });
			var div1_nodes = children(div1);
			h3 = claim_element(div1_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Recent Chats");
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { id: true, class: true });
			var div0_nodes = children(div0);
			claim_component(recentchat0.$$.fragment, div0_nodes);
			t2 = claim_space(div0_nodes);
			claim_component(recentchat1.$$.fragment, div0_nodes);
			t3 = claim_space(div0_nodes);
			claim_component(recentchat2.$$.fragment, div0_nodes);
			t4 = claim_space(div0_nodes);
			claim_component(recentchat3.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h3, "class", "svelte-1sgb1tx");
			add_location(h3, file$1, 11, 1, 172);
			attr_dev(div0, "id", "list");
			attr_dev(div0, "class", "svelte-1sgb1tx");
			add_location(div0, file$1, 12, 1, 195);
			attr_dev(div1, "id", "card");
			add_location(div1, file$1, 10, 0, 155);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, h3);
			append_dev(h3, t0);
			append_dev(div1, t1);
			append_dev(div1, div0);
			mount_component(recentchat0, div0, null);
			append_dev(div0, t2);
			mount_component(recentchat1, div0, null);
			append_dev(div0, t3);
			mount_component(recentchat2, div0, null);
			append_dev(div0, t4);
			mount_component(recentchat3, div0, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(recentchat0.$$.fragment, local);
			transition_in(recentchat1.$$.fragment, local);
			transition_in(recentchat2.$$.fragment, local);
			transition_in(recentchat3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(recentchat0.$$.fragment, local);
			transition_out(recentchat1.$$.fragment, local);
			transition_out(recentchat2.$$.fragment, local);
			transition_out(recentchat3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(recentchat0);
			destroy_component(recentchat1);
			destroy_component(recentchat2);
			destroy_component(recentchat3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { title } = $$props;
	const writable_props = ["title"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<RecentChats> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("RecentChats", $$slots, []);

	$$self.$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
	};

	$$self.$capture_state = () => ({ RecentChat, title });

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [title];
}

class RecentChats extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { title: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "RecentChats",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*title*/ ctx[0] === undefined && !("title" in props)) {
			console.warn("<RecentChats> was created without expected prop 'title'");
		}
	}

	get title() {
		throw new Error("<RecentChats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<RecentChats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/chat.svelte generated by Svelte v3.22.2 */
const file$2 = "src/routes/chat.svelte";

function create_fragment$2(ctx) {
	let t0;
	let t1;
	let div;
	let t2;
	let current;
	const navbar = new Navbar({ props: { title: "Chat" }, $$inline: true });

	const recentchats = new RecentChats({
			props: { title: "Recent Chats" },
			$$inline: true
		});

	const tabbar = new Tabbar({ props: { location: 4 }, $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			create_component(navbar.$$.fragment);
			t1 = space();
			div = element("div");
			create_component(recentchats.$$.fragment);
			t2 = space();
			create_component(tabbar.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-l1t35o\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			claim_component(navbar.$$.fragment, nodes);
			t1 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);
			claim_component(recentchats.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(tabbar.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Chat :: Steam Mobile";
			attr_dev(div, "id", "chat");
			attr_dev(div, "class", "svelte-ak3tq2");
			add_location(div, file$2, 11, 0, 274);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			mount_component(navbar, target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, div, anchor);
			mount_component(recentchats, div, null);
			insert_dev(target, t2, anchor);
			mount_component(tabbar, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(navbar.$$.fragment, local);
			transition_in(recentchats.$$.fragment, local);
			transition_in(tabbar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navbar.$$.fragment, local);
			transition_out(recentchats.$$.fragment, local);
			transition_out(tabbar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			destroy_component(navbar, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div);
			destroy_component(recentchats);
			if (detaching) detach_dev(t2);
			destroy_component(tabbar, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Chat> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Chat", $$slots, []);
	$$self.$capture_state = () => ({ Navbar, Tabbar, RecentChats });
	return [];
}

class Chat extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Chat",
			options,
			id: create_fragment$2.name
		});
	}
}

export default Chat;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdC42MGM4MGEyZC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvUmVjZW50Q2hhdC5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9SZWNlbnRDaGF0cy5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvcm91dGVzL2NoYXQuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG5cdGV4cG9ydCBsZXQgaW1hZ2UsIHN0YXR1cywgbmFtZTtcbjwvc2NyaXB0PlxuXG48IS0tIHN0YXR1cyBjb2Rlc1xuXHQxID0gaW5nYW1lLCAyIG9ubGluZSwgMyBvZmZsaW5lXG5zdGF0dXMgY29kZXMgLS0+XG5cbjxkaXYgaWQ9XCJpbWFnZWhvbGRlclwiIGNsYXNzPXtzdGF0dXMgPT09IDEgPyBcInN0YXR1cyBpbmdhbWVcIiA6ICcnfXtzdGF0dXMgPT09IDIgPyBcInN0YXR1cyBvbmxpbmVcIiA6ICcnfXtzdGF0dXMgPT09IDMgPyBcInN0YXR1cyBvZmZsaW5lXCIgOiAnJ30gc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoe2ltYWdlfSk7XCI+PGRpdiBpZD1cIm5hbWVcIiBjbGFzcz17c3RhdHVzID09PSAxID8gXCJuYW1lLS1pbmdhbWVcIiA6ICcnfXtzdGF0dXMgPT09IDIgPyBcIm5hbWUtLW9ubGluZVwiIDogJyd9e3N0YXR1cyA9PT0gMyA/IFwic3RhdHVzIG9mZmxpbmVcIiA6ICcnfT57bmFtZX08L2Rpdj48L2Rpdj5cblxuPHN0eWxlPlxuXHQjaW1hZ2Vob2xkZXJ7XG5cdFx0aGVpZ2h0OiA1MHB4O1xuXHRcdHdpZHRoOiA1MHB4O1xuXHRcdGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcbiAgXHRcdGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gIFx0XHRiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICBcdFx0Ym9yZGVyLXJhZGl1czogMnB4O1xuICBcdFx0bWFyZ2luLXJpZ2h0OiAyMHB4O1xuICBcdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHR9XG5cblx0I25hbWUge1xuXHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHRib3R0b206IC0yMnB4O1xuXHRcdGZvbnQtc2l6ZTogMTJweDtcblx0XHR3aWR0aDogNTBweDtcblx0XHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0dGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG5cdH1cblxuXHQubmFtZS0taW5nYW1le1xuXHRcdGNvbG9yOiAjNWM3ZTEwO1xuXHR9XG5cblx0Lm5hbWUtLW9ubGluZXtcblx0XHRjb2xvcjogIzU3Y2JkZTtcblx0fVxuXG5cdC5uYW1lLS1vZmZsaW5le1xuXHRcdGNvbG9yOiAjQTBBMEEwO1xuXHR9XG5cblx0LnN0YXR1czo6YWZ0ZXJ7XG5cdFx0Y29udGVudDogJyc7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHdpZHRoOiA1MHB4O1xuXHRcdGhlaWdodDogMnB4O1xuXHRcdGJvdHRvbTogLTI4cHg7XG5cdH1cblxuXHQuaW5nYW1lOjphZnRlcntcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAjNWM3ZTEwO1xuXHR9XG5cblx0Lm9ubGluZTo6YWZ0ZXJ7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogIzU3Y2JkZTtcblx0fVxuXG5cdC5vZmZsaW5le1xuXHRcdG9wYWNpdHk6IDAuNjtcblx0fVxuXG5cdC5vZmZsaW5lOjphZnRlcntcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAjQTBBMEEwO1xuXHR9XG48L3N0eWxlPiIsIjxzY3JpcHQ+XG5cdGltcG9ydCBSZWNlbnRDaGF0IGZyb20gJy4vUmVjZW50Q2hhdC5zdmVsdGUnXG5cblx0ZXhwb3J0IGxldCB0aXRsZTtcbjwvc2NyaXB0PlxuXG48IS0tIHN0YXR1cyBjb2Rlc1xuXHQxID0gaW5nYW1lLCAyIG9ubGluZSwgMyBvZmZsaW5lXG5zdGF0dXMgY29kZXMgLS0+XG5cbjxkaXYgaWQ9XCJjYXJkXCI+XG5cdDxoMz5SZWNlbnQgQ2hhdHM8L2gzPlxuXHQ8ZGl2IGlkPVwibGlzdFwiPlxuXHRcdDxSZWNlbnRDaGF0IGltYWdlPVwiZnJpZW5kb25lLnBuZ1wiIHN0YXR1cz17MX0gbmFtZT1cImJpbmdvdGhlc2xheWVlclwiIC8+XG5cdFx0PFJlY2VudENoYXQgaW1hZ2U9XCJmcmllbmR0d28ucG5nXCIgc3RhdHVzPXsyfSBuYW1lPVwiZmF0aGVyZGVhdGhcIiAvPlxuXHRcdDxSZWNlbnRDaGF0IGltYWdlPVwiZnJpZW5kdGhyZWUucG5nXCIgc3RhdHVzPXsyfSBuYW1lPVwicHlzY2hvdGhlcmFwaXN0XCIgLz5cblx0XHQ8UmVjZW50Q2hhdCBpbWFnZT1cImZyaWVuZGZvdXIucG5nXCIgc3RhdHVzPXszfSBuYW1lPVwiZmF0ZmF0aGVyNjRcIiAvPlxuXHQ8L2Rpdj5cbjwvZGl2PlxuXG48c3R5bGU+XG5cdGgze1xuXHRcdGNvbG9yOiAjYTdkNmYwO1xuXHRcdHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cdFx0Zm9udC13ZWlnaHQ6IDUwMDtcblx0XHRmb250LXNpemU6IDEycHg7XG5cdFx0cGFkZGluZzogMHB4IDMwcHg7XG5cdH1cblxuXHQjbGlzdCB7XG5cdFx0bWFyZ2luOiAxNHB4IDBweDtcblx0XHRwYWRkaW5nLWxlZnQ6IDMwcHg7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHR9XG5cblx0I3RhYnN7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0fVxuPC9zdHlsZT4iLCI8c2NyaXB0PlxuXHRpbXBvcnQgTmF2YmFyIGZyb20gJy4uL2NvbXBvbmVudHMvTmF2YmFyLnN2ZWx0ZSc7XG5cdGltcG9ydCBUYWJiYXIgZnJvbSAnLi4vY29tcG9uZW50cy9UYWJiYXIuc3ZlbHRlJztcblx0aW1wb3J0IFJlY2VudENoYXRzIGZyb20gJy4uL2NvbXBvbmVudHMvUmVjZW50Q2hhdHMuc3ZlbHRlJztcbjwvc2NyaXB0PlxuXG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5DaGF0IDo6IFN0ZWFtIE1vYmlsZTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48TmF2YmFyIHRpdGxlPVwiQ2hhdFwiIC8+XG48ZGl2IGlkPVwiY2hhdFwiPlxuXHQ8UmVjZW50Q2hhdHMgdGl0bGU9XCJSZWNlbnQgQ2hhdHNcIiAvPlxuPC9kaXY+XG48VGFiYmFyIGxvY2F0aW9uPXs0fSAvPlxuXG48c3R5bGU+XG5cdCNjaGF0e1xuXHRcdHBhZGRpbmc6IDkwcHggMHB4O1xuXHRcdHBhZGRpbmctcmlnaHQ6IDA7XG5cdFx0cGFkZGluZy1ib3R0b206IDYwcHg7XG5cdH1cbjwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FCQVEwVCxHQUFJOzs7Ozs7Ozt1Q0FBSixHQUFJOzs7Ozs7O2dFQUFuSCxHQUFNLFFBQUssQ0FBQyxHQUFHLGNBQWMsR0FBRyxFQUFFLGdCQUFFLEdBQU0sUUFBSyxDQUFDLEdBQUcsY0FBYyxHQUFHLEVBQUUsZ0JBQUUsR0FBTSxRQUFLLENBQUMsR0FBRyxnQkFBZ0IsR0FBRyxFQUFFOzs7Z0VBQTFSLEdBQU0sUUFBSyxDQUFDLEdBQUcsZUFBZSxHQUFHLEVBQUUsZ0JBQUUsR0FBTSxRQUFLLENBQUMsR0FBRyxlQUFlLEdBQUcsRUFBRSxnQkFBRSxHQUFNLFFBQUssQ0FBQyxHQUFHLGdCQUFnQixHQUFHLEVBQUU7MERBQWdDLEdBQUs7Ozs7Ozs7OztvREFBMEksR0FBSTs7MEZBQW5ILEdBQU0sUUFBSyxDQUFDLEdBQUcsY0FBYyxHQUFHLEVBQUUsZ0JBQUUsR0FBTSxRQUFLLENBQUMsR0FBRyxjQUFjLEdBQUcsRUFBRSxnQkFBRSxHQUFNLFFBQUssQ0FBQyxHQUFHLGdCQUFnQixHQUFHLEVBQUU7Ozs7MEZBQTFSLEdBQU0sUUFBSyxDQUFDLEdBQUcsZUFBZSxHQUFHLEVBQUUsZ0JBQUUsR0FBTSxRQUFLLENBQUMsR0FBRyxlQUFlLEdBQUcsRUFBRSxnQkFBRSxHQUFNLFFBQUssQ0FBQyxHQUFHLGdCQUFnQixHQUFHLEVBQUU7Ozs7OzJEQUFnQyxHQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BUHBLLEtBQUssZ0JBQUUsTUFBTSxnQkFBRSxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQ1lhLENBQUM7Ozs7Ozs7OztZQUNELENBQUM7Ozs7Ozs7OztZQUNDLENBQUM7Ozs7Ozs7OztZQUNGLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BYmxDLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnRENXQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
