import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, t as text, h as claim_element, j as children, k as claim_text, b as detach_dev, l as attr_dev, m as add_location, z as set_style, n as insert_dev, p as append_dev, y as set_data_dev, r as noop, a as space, c as create_component, f as claim_space, g as claim_component, o as mount_component, u as transition_in, w as transition_out, x as destroy_component, C as null_to_empty, D as run_all, E as listen_dev, A as group_outros, B as check_outros, q as query_selector_all } from './client.b0fbd731.js';
import { N as Navbar, T as Tabbar } from './Tabbar.8f413353.js';

/* src/components/RecentChat.svelte generated by Svelte v3.22.2 */

const file = "src/components/RecentChat.svelte";

function create_fragment(ctx) {
	let div1;
	let div0;
	let t;
	let div0_class_value;
	let div1_class_value;

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			t = text(/*name*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { id: true, class: true, style: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { id: true, class: true });
			var div0_nodes = children(div0);
			t = claim_text(div0_nodes, /*name*/ ctx[2]);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "id", "name");
			attr_dev(div0, "class", div0_class_value = "" + ((/*status*/ ctx[1] === 1 ? "name--ingame" : "") + (/*status*/ ctx[1] === 2 ? "name--online" : "") + (/*status*/ ctx[1] === 3 ? "status offline" : "") + " svelte-rf5a4b"));
			add_location(div0, file, 10, 1, 307);
			attr_dev(div1, "id", "imageholder");
			attr_dev(div1, "class", div1_class_value = "" + ((/*status*/ ctx[1] === 1 ? "status ingame" : "") + (/*status*/ ctx[1] === 2 ? "status online" : "") + (/*status*/ ctx[1] === 3 ? "status offline" : "") + " svelte-rf5a4b"));
			set_style(div1, "background-image", "url(" + /*image*/ ctx[0] + ")");
			add_location(div1, file, 8, 0, 122);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, t);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*name*/ 4) set_data_dev(t, /*name*/ ctx[2]);

			if (dirty & /*status*/ 2 && div0_class_value !== (div0_class_value = "" + ((/*status*/ ctx[1] === 1 ? "name--ingame" : "") + (/*status*/ ctx[1] === 2 ? "name--online" : "") + (/*status*/ ctx[1] === 3 ? "status offline" : "") + " svelte-rf5a4b"))) {
				attr_dev(div0, "class", div0_class_value);
			}

			if (dirty & /*status*/ 2 && div1_class_value !== (div1_class_value = "" + ((/*status*/ ctx[1] === 1 ? "status ingame" : "") + (/*status*/ ctx[1] === 2 ? "status online" : "") + (/*status*/ ctx[1] === 3 ? "status offline" : "") + " svelte-rf5a4b"))) {
				attr_dev(div1, "class", div1_class_value);
			}

			if (dirty & /*image*/ 1) {
				set_style(div1, "background-image", "url(" + /*image*/ ctx[0] + ")");
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { image } = $$props, { status } = $$props, { name } = $$props;
	const writable_props = ["image", "status", "name"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<RecentChat> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("RecentChat", $$slots, []);

	$$self.$set = $$props => {
		if ("image" in $$props) $$invalidate(0, image = $$props.image);
		if ("status" in $$props) $$invalidate(1, status = $$props.status);
		if ("name" in $$props) $$invalidate(2, name = $$props.name);
	};

	$$self.$capture_state = () => ({ image, status, name });

	$$self.$inject_state = $$props => {
		if ("image" in $$props) $$invalidate(0, image = $$props.image);
		if ("status" in $$props) $$invalidate(1, status = $$props.status);
		if ("name" in $$props) $$invalidate(2, name = $$props.name);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [image, status, name];
}

class RecentChat extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { image: 0, status: 1, name: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "RecentChat",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*image*/ ctx[0] === undefined && !("image" in props)) {
			console.warn("<RecentChat> was created without expected prop 'image'");
		}

		if (/*status*/ ctx[1] === undefined && !("status" in props)) {
			console.warn("<RecentChat> was created without expected prop 'status'");
		}

		if (/*name*/ ctx[2] === undefined && !("name" in props)) {
			console.warn("<RecentChat> was created without expected prop 'name'");
		}
	}

	get image() {
		throw new Error("<RecentChat>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set image(value) {
		throw new Error("<RecentChat>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get status() {
		throw new Error("<RecentChat>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set status(value) {
		throw new Error("<RecentChat>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<RecentChat>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<RecentChat>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/RecentChats.svelte generated by Svelte v3.22.2 */
const file$1 = "src/components/RecentChats.svelte";

function create_fragment$1(ctx) {
	let div1;
	let h3;
	let t0;
	let t1;
	let div0;
	let t2;
	let t3;
	let t4;
	let current;

	const recentchat0 = new RecentChat({
			props: {
				image: "friendone.png",
				status: 1,
				name: "bingotheslayeer"
			},
			$$inline: true
		});

	const recentchat1 = new RecentChat({
			props: {
				image: "friendtwo.png",
				status: 2,
				name: "fatherdeath"
			},
			$$inline: true
		});

	const recentchat2 = new RecentChat({
			props: {
				image: "friendthree.png",
				status: 2,
				name: "pyschotherapist"
			},
			$$inline: true
		});

	const recentchat3 = new RecentChat({
			props: {
				image: "friendfour.png",
				status: 3,
				name: "fatfather64"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			h3 = element("h3");
			t0 = text("Recent Chats");
			t1 = space();
			div0 = element("div");
			create_component(recentchat0.$$.fragment);
			t2 = space();
			create_component(recentchat1.$$.fragment);
			t3 = space();
			create_component(recentchat2.$$.fragment);
			t4 = space();
			create_component(recentchat3.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);
			h3 = claim_element(div1_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Recent Chats");
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { id: true, class: true });
			var div0_nodes = children(div0);
			claim_component(recentchat0.$$.fragment, div0_nodes);
			t2 = claim_space(div0_nodes);
			claim_component(recentchat1.$$.fragment, div0_nodes);
			t3 = claim_space(div0_nodes);
			claim_component(recentchat2.$$.fragment, div0_nodes);
			t4 = claim_space(div0_nodes);
			claim_component(recentchat3.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h3, "class", "svelte-15bq6de");
			add_location(h3, file$1, 11, 1, 172);
			attr_dev(div0, "id", "list");
			attr_dev(div0, "class", "svelte-15bq6de");
			add_location(div0, file$1, 12, 1, 195);
			attr_dev(div1, "id", "card");
			attr_dev(div1, "class", "svelte-15bq6de");
			add_location(div1, file$1, 10, 0, 155);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, h3);
			append_dev(h3, t0);
			append_dev(div1, t1);
			append_dev(div1, div0);
			mount_component(recentchat0, div0, null);
			append_dev(div0, t2);
			mount_component(recentchat1, div0, null);
			append_dev(div0, t3);
			mount_component(recentchat2, div0, null);
			append_dev(div0, t4);
			mount_component(recentchat3, div0, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(recentchat0.$$.fragment, local);
			transition_in(recentchat1.$$.fragment, local);
			transition_in(recentchat2.$$.fragment, local);
			transition_in(recentchat3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(recentchat0.$$.fragment, local);
			transition_out(recentchat1.$$.fragment, local);
			transition_out(recentchat2.$$.fragment, local);
			transition_out(recentchat3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(recentchat0);
			destroy_component(recentchat1);
			destroy_component(recentchat2);
			destroy_component(recentchat3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { title } = $$props;
	const writable_props = ["title"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<RecentChats> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("RecentChats", $$slots, []);

	$$self.$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
	};

	$$self.$capture_state = () => ({ RecentChat, title });

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [title];
}

class RecentChats extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { title: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "RecentChats",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*title*/ ctx[0] === undefined && !("title" in props)) {
			console.warn("<RecentChats> was created without expected prop 'title'");
		}
	}

	get title() {
		throw new Error("<RecentChats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<RecentChats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/ChatsTile.svelte generated by Svelte v3.22.2 */

const file$2 = "src/components/ChatsTile.svelte";

// (15:20) 
function create_if_block_1(ctx) {
	let div;
	let t0;
	let t1;
	let t2;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text("Last online ");
			t1 = text(/*timestamp*/ ctx[4]);
			t2 = text(" days ago");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, "Last online ");
			t1 = claim_text(div_nodes, /*timestamp*/ ctx[4]);
			t2 = claim_text(div_nodes, " days ago");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "id", "lastonline");
			attr_dev(div, "class", "svelte-2v5m65");
			add_location(div, file$2, 15, 3, 612);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			append_dev(div, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*timestamp*/ 16) set_data_dev(t1, /*timestamp*/ ctx[4]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(15:20) ",
		ctx
	});

	return block;
}

// (13:2) {#if !offline}
function create_if_block(ctx) {
	let div;
	let t_value = (!/*gameName*/ ctx[1] ? "Online" : /*gameName*/ ctx[1]) + "";
	let t;
	let div_class_value;

	const block = {
		c: function create() {
			div = element("div");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, t_value);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "id", "usergame");
			attr_dev(div, "class", div_class_value = "" + (null_to_empty(!/*gameName*/ ctx[1] ? "onlinegamename" : "") + " svelte-2v5m65"));
			add_location(div, file$2, 13, 3, 487);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*gameName*/ 2 && t_value !== (t_value = (!/*gameName*/ ctx[1] ? "Online" : /*gameName*/ ctx[1]) + "")) set_data_dev(t, t_value);

			if (dirty & /*gameName*/ 2 && div_class_value !== (div_class_value = "" + (null_to_empty(!/*gameName*/ ctx[1] ? "onlinegamename" : "") + " svelte-2v5m65"))) {
				attr_dev(div, "class", div_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(13:2) {#if !offline}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let li;
	let div0;
	let t0;
	let div2;
	let div1;
	let t1;
	let div1_class_value;
	let t2;
	let li_class_value;
	let t3;

	function select_block_type(ctx, dirty) {
		if (!/*offline*/ ctx[5]) return create_if_block;
		if (/*offline*/ ctx[5]) return create_if_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type && current_block_type(ctx);

	const block = {
		c: function create() {
			li = element("li");
			div0 = element("div");
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			t1 = text(/*userName*/ ctx[0]);
			t2 = space();
			if (if_block) if_block.c();
			t3 = text("\n\n// offline ? \"status ingame statusoffline\" : \"status online\"");
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			div0 = claim_element(li_nodes, "DIV", { id: true, style: true, class: true });
			children(div0).forEach(detach_dev);
			t0 = claim_space(li_nodes);
			div2 = claim_element(li_nodes, "DIV", { id: true, class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);
			t1 = claim_text(div1_nodes, /*userName*/ ctx[0]);
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div2_nodes);
			if (if_block) if_block.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			t3 = claim_text(nodes, "\n\n// offline ? \"status ingame statusoffline\" : \"status online\"");
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "id", "userimage");
			set_style(div0, "background-image", "url(" + /*userImage*/ ctx[2] + ")");
			attr_dev(div0, "class", "svelte-2v5m65");
			add_location(div0, file$2, 9, 1, 299);
			attr_dev(div1, "id", "username");
			attr_dev(div1, "class", div1_class_value = "" + (null_to_empty(!/*gameName*/ ctx[1] ? "onlineusername" : "") + " svelte-2v5m65"));
			add_location(div1, file$2, 11, 3, 389);
			attr_dev(div2, "id", "info");
			attr_dev(div2, "class", "svelte-2v5m65");
			add_location(div2, file$2, 10, 1, 370);

			attr_dev(li, "class", li_class_value = "" + ((/*status*/ ctx[3] === 1 ? "status ingame" : "") + (/*status*/ ctx[3] === 2 ? "status online" : "") + (/*status*/ ctx[3] === 3
			? "status offine statusoffline"
			: "") + " svelte-2v5m65"));

			add_location(li, file$2, 8, 0, 160);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, div0);
			append_dev(li, t0);
			append_dev(li, div2);
			append_dev(div2, div1);
			append_dev(div1, t1);
			append_dev(div2, t2);
			if (if_block) if_block.m(div2, null);
			insert_dev(target, t3, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*userImage*/ 4) {
				set_style(div0, "background-image", "url(" + /*userImage*/ ctx[2] + ")");
			}

			if (dirty & /*userName*/ 1) set_data_dev(t1, /*userName*/ ctx[0]);

			if (dirty & /*gameName*/ 2 && div1_class_value !== (div1_class_value = "" + (null_to_empty(!/*gameName*/ ctx[1] ? "onlineusername" : "") + " svelte-2v5m65"))) {
				attr_dev(div1, "class", div1_class_value);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div2, null);
				}
			}

			if (dirty & /*status*/ 8 && li_class_value !== (li_class_value = "" + ((/*status*/ ctx[3] === 1 ? "status ingame" : "") + (/*status*/ ctx[3] === 2 ? "status online" : "") + (/*status*/ ctx[3] === 3
			? "status offine statusoffline"
			: "") + " svelte-2v5m65"))) {
				attr_dev(li, "class", li_class_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);

			if (if_block) {
				if_block.d();
			}

			if (detaching) detach_dev(t3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { userName } = $$props,
		{ gameName } = $$props,
		{ userImage } = $$props,
		{ status } = $$props,
		{ timestamp } = $$props,
		{ offline } = $$props;

	const writable_props = ["userName", "gameName", "userImage", "status", "timestamp", "offline"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ChatsTile> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("ChatsTile", $$slots, []);

	$$self.$set = $$props => {
		if ("userName" in $$props) $$invalidate(0, userName = $$props.userName);
		if ("gameName" in $$props) $$invalidate(1, gameName = $$props.gameName);
		if ("userImage" in $$props) $$invalidate(2, userImage = $$props.userImage);
		if ("status" in $$props) $$invalidate(3, status = $$props.status);
		if ("timestamp" in $$props) $$invalidate(4, timestamp = $$props.timestamp);
		if ("offline" in $$props) $$invalidate(5, offline = $$props.offline);
	};

	$$self.$capture_state = () => ({
		userName,
		gameName,
		userImage,
		status,
		timestamp,
		offline
	});

	$$self.$inject_state = $$props => {
		if ("userName" in $$props) $$invalidate(0, userName = $$props.userName);
		if ("gameName" in $$props) $$invalidate(1, gameName = $$props.gameName);
		if ("userImage" in $$props) $$invalidate(2, userImage = $$props.userImage);
		if ("status" in $$props) $$invalidate(3, status = $$props.status);
		if ("timestamp" in $$props) $$invalidate(4, timestamp = $$props.timestamp);
		if ("offline" in $$props) $$invalidate(5, offline = $$props.offline);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [userName, gameName, userImage, status, timestamp, offline];
}

class ChatsTile extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			userName: 0,
			gameName: 1,
			userImage: 2,
			status: 3,
			timestamp: 4,
			offline: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ChatsTile",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*userName*/ ctx[0] === undefined && !("userName" in props)) {
			console.warn("<ChatsTile> was created without expected prop 'userName'");
		}

		if (/*gameName*/ ctx[1] === undefined && !("gameName" in props)) {
			console.warn("<ChatsTile> was created without expected prop 'gameName'");
		}

		if (/*userImage*/ ctx[2] === undefined && !("userImage" in props)) {
			console.warn("<ChatsTile> was created without expected prop 'userImage'");
		}

		if (/*status*/ ctx[3] === undefined && !("status" in props)) {
			console.warn("<ChatsTile> was created without expected prop 'status'");
		}

		if (/*timestamp*/ ctx[4] === undefined && !("timestamp" in props)) {
			console.warn("<ChatsTile> was created without expected prop 'timestamp'");
		}

		if (/*offline*/ ctx[5] === undefined && !("offline" in props)) {
			console.warn("<ChatsTile> was created without expected prop 'offline'");
		}
	}

	get userName() {
		throw new Error("<ChatsTile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set userName(value) {
		throw new Error("<ChatsTile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gameName() {
		throw new Error("<ChatsTile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gameName(value) {
		throw new Error("<ChatsTile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get userImage() {
		throw new Error("<ChatsTile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set userImage(value) {
		throw new Error("<ChatsTile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get status() {
		throw new Error("<ChatsTile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set status(value) {
		throw new Error("<ChatsTile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get timestamp() {
		throw new Error("<ChatsTile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set timestamp(value) {
		throw new Error("<ChatsTile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get offline() {
		throw new Error("<ChatsTile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set offline(value) {
		throw new Error("<ChatsTile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Chats.svelte generated by Svelte v3.22.2 */
const file$3 = "src/components/Chats.svelte";

// (20:1) {#if !offline}
function create_if_block_1$1(ctx) {
	let ul;
	let t0;
	let t1;
	let current;

	const chatstile0 = new ChatsTile({
			props: {
				userName: "bingotheslayer",
				gameName: "Dank Souls 3",
				userImage: "friendone.png",
				status: 1,
				offline: /*offline*/ ctx[0]
			},
			$$inline: true
		});

	const chatstile1 = new ChatsTile({
			props: {
				userName: "fatherdeath",
				userImage: "friendtwo.png",
				status: 2,
				offline: /*offline*/ ctx[0]
			},
			$$inline: true
		});

	const chatstile2 = new ChatsTile({
			props: {
				userName: "pyschotherapist",
				userImage: "friendthree.png",
				status: 2,
				offline: /*offline*/ ctx[0]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			ul = element("ul");
			create_component(chatstile0.$$.fragment);
			t0 = space();
			create_component(chatstile1.$$.fragment);
			t1 = space();
			create_component(chatstile2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			claim_component(chatstile0.$$.fragment, ul_nodes);
			t0 = claim_space(ul_nodes);
			claim_component(chatstile1.$$.fragment, ul_nodes);
			t1 = claim_space(ul_nodes);
			claim_component(chatstile2.$$.fragment, ul_nodes);
			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "svelte-16sc42");
			add_location(ul, file$3, 20, 2, 505);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);
			mount_component(chatstile0, ul, null);
			append_dev(ul, t0);
			mount_component(chatstile1, ul, null);
			append_dev(ul, t1);
			mount_component(chatstile2, ul, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const chatstile0_changes = {};
			if (dirty & /*offline*/ 1) chatstile0_changes.offline = /*offline*/ ctx[0];
			chatstile0.$set(chatstile0_changes);
			const chatstile1_changes = {};
			if (dirty & /*offline*/ 1) chatstile1_changes.offline = /*offline*/ ctx[0];
			chatstile1.$set(chatstile1_changes);
			const chatstile2_changes = {};
			if (dirty & /*offline*/ 1) chatstile2_changes.offline = /*offline*/ ctx[0];
			chatstile2.$set(chatstile2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(chatstile0.$$.fragment, local);
			transition_in(chatstile1.$$.fragment, local);
			transition_in(chatstile2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(chatstile0.$$.fragment, local);
			transition_out(chatstile1.$$.fragment, local);
			transition_out(chatstile2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_component(chatstile0);
			destroy_component(chatstile1);
			destroy_component(chatstile2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(20:1) {#if !offline}",
		ctx
	});

	return block;
}

// (27:1) {#if offline}
function create_if_block$1(ctx) {
	let ul;
	let t;
	let current;

	const chatstile0 = new ChatsTile({
			props: {
				userName: "fatfather64",
				gameName: "Grand Theft Auto: San Andreas",
				userImage: "friendfour.png",
				status: 3,
				offline: /*offline*/ ctx[0],
				timestamp: "6"
			},
			$$inline: true
		});

	const chatstile1 = new ChatsTile({
			props: {
				userName: "dingdongding",
				gameName: "Grand Theft Auto: San Andreas",
				userImage: "profilepicture.jpg",
				status: 3,
				offline: /*offline*/ ctx[0],
				timestamp: "12"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			ul = element("ul");
			create_component(chatstile0.$$.fragment);
			t = space();
			create_component(chatstile1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			claim_component(chatstile0.$$.fragment, ul_nodes);
			t = claim_space(ul_nodes);
			claim_component(chatstile1.$$.fragment, ul_nodes);
			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "svelte-16sc42");
			add_location(ul, file$3, 27, 2, 836);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);
			mount_component(chatstile0, ul, null);
			append_dev(ul, t);
			mount_component(chatstile1, ul, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const chatstile0_changes = {};
			if (dirty & /*offline*/ 1) chatstile0_changes.offline = /*offline*/ ctx[0];
			chatstile0.$set(chatstile0_changes);
			const chatstile1_changes = {};
			if (dirty & /*offline*/ 1) chatstile1_changes.offline = /*offline*/ ctx[0];
			chatstile1.$set(chatstile1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(chatstile0.$$.fragment, local);
			transition_in(chatstile1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(chatstile0.$$.fragment, local);
			transition_out(chatstile1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_component(chatstile0);
			destroy_component(chatstile1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(27:1) {#if offline}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let div2;
	let div1;
	let div0;
	let h30;
	let t0;
	let t1;
	let t2;
	let h30_class_value;
	let t3;
	let h31;
	let t4;
	let t5;
	let t6;
	let h31_class_value;
	let t7;
	let t8;
	let current;
	let dispose;
	let if_block0 = !/*offline*/ ctx[0] && create_if_block_1$1(ctx);
	let if_block1 = /*offline*/ ctx[0] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			h30 = element("h3");
			t0 = text("Online (");
			t1 = text(/*onlineusers*/ ctx[1]);
			t2 = text(")");
			t3 = space();
			h31 = element("h3");
			t4 = text("Offline (");
			t5 = text(/*offlineusers*/ ctx[2]);
			t6 = text(")");
			t7 = space();
			if (if_block0) if_block0.c();
			t8 = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { id: true, class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { id: true, class: true });
			var div0_nodes = children(div0);
			h30 = claim_element(div0_nodes, "H3", { class: true });
			var h30_nodes = children(h30);
			t0 = claim_text(h30_nodes, "Online (");
			t1 = claim_text(h30_nodes, /*onlineusers*/ ctx[1]);
			t2 = claim_text(h30_nodes, ")");
			h30_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			h31 = claim_element(div0_nodes, "H3", { class: true });
			var h31_nodes = children(h31);
			t4 = claim_text(h31_nodes, "Offline (");
			t5 = claim_text(h31_nodes, /*offlineusers*/ ctx[2]);
			t6 = claim_text(h31_nodes, ")");
			h31_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t7 = claim_space(div2_nodes);
			if (if_block0) if_block0.l(div2_nodes);
			t8 = claim_space(div2_nodes);
			if (if_block1) if_block1.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h30, "class", h30_class_value = "" + (null_to_empty(!/*offline*/ ctx[0] ? "selectedtab" : "") + " svelte-16sc42"));
			add_location(h30, file$3, 15, 3, 257);
			attr_dev(h31, "class", h31_class_value = "" + (null_to_empty(/*offline*/ ctx[0] ? "selectedtab" : "") + " svelte-16sc42"));
			add_location(h31, file$3, 16, 3, 365);
			attr_dev(div0, "id", "tabs");
			attr_dev(div0, "class", "svelte-16sc42");
			add_location(div0, file$3, 14, 2, 238);
			attr_dev(div1, "id", "tabscontainer");
			attr_dev(div1, "class", "svelte-16sc42");
			add_location(div1, file$3, 13, 1, 211);
			attr_dev(div2, "id", "card");
			attr_dev(div2, "class", "svelte-16sc42");
			add_location(div2, file$3, 12, 0, 194);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div0, h30);
			append_dev(h30, t0);
			append_dev(h30, t1);
			append_dev(h30, t2);
			append_dev(div0, t3);
			append_dev(div0, h31);
			append_dev(h31, t4);
			append_dev(h31, t5);
			append_dev(h31, t6);
			append_dev(div2, t7);
			if (if_block0) if_block0.m(div2, null);
			append_dev(div2, t8);
			if (if_block1) if_block1.m(div2, null);
			current = true;
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(h30, "click", /*click_handler*/ ctx[3], false, false, false),
				listen_dev(h31, "click", /*click_handler_1*/ ctx[4], false, false, false)
			];
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*offline*/ 1 && h30_class_value !== (h30_class_value = "" + (null_to_empty(!/*offline*/ ctx[0] ? "selectedtab" : "") + " svelte-16sc42"))) {
				attr_dev(h30, "class", h30_class_value);
			}

			if (!current || dirty & /*offline*/ 1 && h31_class_value !== (h31_class_value = "" + (null_to_empty(/*offline*/ ctx[0] ? "selectedtab" : "") + " svelte-16sc42"))) {
				attr_dev(h31, "class", h31_class_value);
			}

			if (!/*offline*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*offline*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div2, t8);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*offline*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*offline*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div2, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let offline = false, onlineusers = 3, offlineusers = 2;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Chats> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Chats", $$slots, []);

	const click_handler = () => {
		$$invalidate(0, offline = false);
	};

	const click_handler_1 = () => {
		$$invalidate(0, offline = true);
	};

	$$self.$capture_state = () => ({
		ChatsTile,
		offline,
		onlineusers,
		offlineusers
	});

	$$self.$inject_state = $$props => {
		if ("offline" in $$props) $$invalidate(0, offline = $$props.offline);
		if ("onlineusers" in $$props) $$invalidate(1, onlineusers = $$props.onlineusers);
		if ("offlineusers" in $$props) $$invalidate(2, offlineusers = $$props.offlineusers);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [offline, onlineusers, offlineusers, click_handler, click_handler_1];
}

class Chats extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Chats",
			options,
			id: create_fragment$3.name
		});
	}
}

/* src/routes/chat.svelte generated by Svelte v3.22.2 */
const file$4 = "src/routes/chat.svelte";

function create_fragment$4(ctx) {
	let t0;
	let t1;
	let div;
	let t2;
	let t3;
	let current;
	const navbar = new Navbar({ props: { title: "Chat" }, $$inline: true });

	const recentchats = new RecentChats({
			props: { title: "Recent Chats" },
			$$inline: true
		});

	const chats = new Chats({ $$inline: true });
	const tabbar = new Tabbar({ props: { location: 4 }, $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			create_component(navbar.$$.fragment);
			t1 = space();
			div = element("div");
			create_component(recentchats.$$.fragment);
			t2 = space();
			create_component(chats.$$.fragment);
			t3 = space();
			create_component(tabbar.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-l1t35o\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			claim_component(navbar.$$.fragment, nodes);
			t1 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);
			claim_component(recentchats.$$.fragment, div_nodes);
			t2 = claim_space(div_nodes);
			claim_component(chats.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			claim_component(tabbar.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Chat :: Steam Mobile";
			attr_dev(div, "id", "chat");
			attr_dev(div, "class", "svelte-18avg01");
			add_location(div, file$4, 12, 0, 323);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			mount_component(navbar, target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, div, anchor);
			mount_component(recentchats, div, null);
			append_dev(div, t2);
			mount_component(chats, div, null);
			insert_dev(target, t3, anchor);
			mount_component(tabbar, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(navbar.$$.fragment, local);
			transition_in(recentchats.$$.fragment, local);
			transition_in(chats.$$.fragment, local);
			transition_in(tabbar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navbar.$$.fragment, local);
			transition_out(recentchats.$$.fragment, local);
			transition_out(chats.$$.fragment, local);
			transition_out(tabbar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			destroy_component(navbar, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div);
			destroy_component(recentchats);
			destroy_component(chats);
			if (detaching) detach_dev(t3);
			destroy_component(tabbar, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Chat> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Chat", $$slots, []);
	$$self.$capture_state = () => ({ Navbar, Tabbar, RecentChats, Chats });
	return [];
}

class Chat extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Chat",
			options,
			id: create_fragment$4.name
		});
	}
}

export default Chat;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
