import {
  S as SvelteComponentDev,
  i as init,
  s as safe_not_equal,
  d as dispatch_dev,
  v as validate_slots,
  e as element,
  a as space,
  t as text,
  c as claim_element,
  b as children,
  f as detach_dev,
  g as claim_space,
  h as claim_text,
  j as attr_dev,
  l as add_location,
  k as set_style,
  m as insert_dev,
  n as append_dev,
  o as set_data_dev,
  p as noop,
  q as create_component,
  r as query_selector_all,
  u as claim_component,
  w as mount_component,
  x as transition_in,
  y as transition_out,
  z as destroy_component,
} from './client.10a54dd2.js'
import { N as Navbar, T as Tabbar } from './Tabbar.4eb700f3.js'
import { u as username } from './stores.9a127f2c.js'

/* src/components/ProfileHeader.svelte generated by Svelte v3.22.2 */

const file = 'src/components/ProfileHeader.svelte'

function create_fragment(ctx) {
  let main
  let div8
  let div0
  let t0
  let div5
  let div4
  let div1
  let t1
  let div2
  let h3
  let t2
  let t3
  let h5
  let t4
  let t5
  let div3
  let t6
  let t7
  let div6
  let t8
  let div7

  const block = {
    c: function create() {
      main = element('main')
      div8 = element('div')
      div0 = element('div')
      t0 = space()
      div5 = element('div')
      div4 = element('div')
      div1 = element('div')
      t1 = space()
      div2 = element('div')
      h3 = element('h3')
      t2 = text(/*alias*/ ctx[0])
      t3 = space()
      h5 = element('h5')
      t4 = text(/*name*/ ctx[1])
      t5 = space()
      div3 = element('div')
      t6 = text(/*level*/ ctx[3])
      t7 = space()
      div6 = element('div')
      t8 = space()
      div7 = element('div')
      this.h()
    },
    l: function claim(nodes) {
      main = claim_element(nodes, 'MAIN', {})
      var main_nodes = children(main)
      div8 = claim_element(main_nodes, 'DIV', { id: true, class: true })
      var div8_nodes = children(div8)
      div0 = claim_element(div8_nodes, 'DIV', { id: true, class: true })
      children(div0).forEach(detach_dev)
      t0 = claim_space(div8_nodes)
      div5 = claim_element(div8_nodes, 'DIV', { id: true, class: true })
      var div5_nodes = children(div5)
      div4 = claim_element(div5_nodes, 'DIV', { id: true, class: true })
      var div4_nodes = children(div4)
      div1 = claim_element(div4_nodes, 'DIV', {
        id: true,
        style: true,
        class: true,
      })
      children(div1).forEach(detach_dev)
      t1 = claim_space(div4_nodes)
      div2 = claim_element(div4_nodes, 'DIV', { id: true, class: true })
      var div2_nodes = children(div2)
      h3 = claim_element(div2_nodes, 'H3', { class: true })
      var h3_nodes = children(h3)
      t2 = claim_text(h3_nodes, /*alias*/ ctx[0])
      h3_nodes.forEach(detach_dev)
      t3 = claim_space(div2_nodes)
      h5 = claim_element(div2_nodes, 'H5', { class: true })
      var h5_nodes = children(h5)
      t4 = claim_text(h5_nodes, /*name*/ ctx[1])
      h5_nodes.forEach(detach_dev)
      div2_nodes.forEach(detach_dev)
      t5 = claim_space(div4_nodes)
      div3 = claim_element(div4_nodes, 'DIV', { id: true, class: true })
      var div3_nodes = children(div3)
      t6 = claim_text(div3_nodes, /*level*/ ctx[3])
      div3_nodes.forEach(detach_dev)
      div4_nodes.forEach(detach_dev)
      div5_nodes.forEach(detach_dev)
      t7 = claim_space(div8_nodes)
      div6 = claim_element(div8_nodes, 'DIV', {
        id: true,
        style: true,
        class: true,
      })
      children(div6).forEach(detach_dev)
      t8 = claim_space(div8_nodes)
      div7 = claim_element(div8_nodes, 'DIV', { id: true, class: true })
      children(div7).forEach(detach_dev)
      div8_nodes.forEach(detach_dev)
      main_nodes.forEach(detach_dev)
      this.h()
    },
    h: function hydrate() {
      attr_dev(div0, 'id', 'layer1')
      attr_dev(div0, 'class', 'svelte-18ba1px')
      add_location(div0, file, 6, 2, 97)
      attr_dev(div1, 'id', 'profilepicture')
      set_style(
        div1,
        'background-image',
        'url(' + /*profilepicture*/ ctx[2] + ')'
      )
      attr_dev(div1, 'class', 'svelte-18ba1px')
      add_location(div1, file, 9, 6, 178)
      attr_dev(h3, 'class', 'svelte-18ba1px')
      add_location(h3, file, 11, 8, 293)
      attr_dev(h5, 'class', 'svelte-18ba1px')
      add_location(h5, file, 12, 8, 318)
      attr_dev(div2, 'id', 'userinfo')
      attr_dev(div2, 'class', 'svelte-18ba1px')
      add_location(div2, file, 10, 6, 265)
      attr_dev(div3, 'id', 'level')
      attr_dev(div3, 'class', 'svelte-18ba1px')
      add_location(div3, file, 15, 6, 413)
      attr_dev(div4, 'id', 'content')
      attr_dev(div4, 'class', 'svelte-18ba1px')
      add_location(div4, file, 8, 4, 153)
      attr_dev(div5, 'id', 'contentwrapper')
      attr_dev(div5, 'class', 'svelte-18ba1px')
      add_location(div5, file, 7, 2, 123)
      attr_dev(div6, 'id', 'layer2')
      set_style(div6, 'background-image', 'url(gta.jpg)')
      attr_dev(div6, 'class', 'svelte-18ba1px')
      add_location(div6, file, 19, 2, 525)
      attr_dev(div7, 'id', 'layer3')
      attr_dev(div7, 'class', 'svelte-18ba1px')
      add_location(div7, file, 20, 2, 591)
      attr_dev(div8, 'id', 'head')
      attr_dev(div8, 'class', 'svelte-18ba1px')
      add_location(div8, file, 5, 0, 77)
      add_location(main, file, 4, 0, 70)
    },
    m: function mount(target, anchor) {
      insert_dev(target, main, anchor)
      append_dev(main, div8)
      append_dev(div8, div0)
      append_dev(div8, t0)
      append_dev(div8, div5)
      append_dev(div5, div4)
      append_dev(div4, div1)
      append_dev(div4, t1)
      append_dev(div4, div2)
      append_dev(div2, h3)
      append_dev(h3, t2)
      append_dev(div2, t3)
      append_dev(div2, h5)
      append_dev(h5, t4)
      append_dev(div4, t5)
      append_dev(div4, div3)
      append_dev(div3, t6)
      append_dev(div8, t7)
      append_dev(div8, div6)
      append_dev(div8, t8)
      append_dev(div8, div7)
    },
    p: function update(ctx, [dirty]) {
      if (dirty & /*profilepicture*/ 4) {
        set_style(
          div1,
          'background-image',
          'url(' + /*profilepicture*/ ctx[2] + ')'
        )
      }

      if (dirty & /*alias*/ 1) set_data_dev(t2, /*alias*/ ctx[0])
      if (dirty & /*name*/ 2) set_data_dev(t4, /*name*/ ctx[1])
      if (dirty & /*level*/ 8) set_data_dev(t6, /*level*/ ctx[3])
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(main)
    },
  }

  dispatch_dev('SvelteRegisterBlock', {
    block,
    id: create_fragment.name,
    type: 'component',
    source: '',
    ctx,
  })

  return block
}

function instance($$self, $$props, $$invalidate) {
  let { alias } = $$props,
    { name } = $$props,
    { profilepicture } = $$props,
    { level } = $$props

  const writable_props = ['alias', 'name', 'profilepicture', 'level']

  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$')
      console.warn(`<ProfileHeader> was created with unknown prop '${key}'`)
  })

  let { $$slots = {}, $$scope } = $$props
  validate_slots('ProfileHeader', $$slots, [])

  $$self.$set = ($$props) => {
    if ('alias' in $$props) $$invalidate(0, (alias = $$props.alias))
    if ('name' in $$props) $$invalidate(1, (name = $$props.name))
    if ('profilepicture' in $$props)
      $$invalidate(2, (profilepicture = $$props.profilepicture))
    if ('level' in $$props) $$invalidate(3, (level = $$props.level))
  }

  $$self.$capture_state = () => ({ alias, name, profilepicture, level })

  $$self.$inject_state = ($$props) => {
    if ('alias' in $$props) $$invalidate(0, (alias = $$props.alias))
    if ('name' in $$props) $$invalidate(1, (name = $$props.name))
    if ('profilepicture' in $$props)
      $$invalidate(2, (profilepicture = $$props.profilepicture))
    if ('level' in $$props) $$invalidate(3, (level = $$props.level))
  }

  if ($$props && '$$inject' in $$props) {
    $$self.$inject_state($$props.$$inject)
  }

  return [alias, name, profilepicture, level]
}

class ProfileHeader extends SvelteComponentDev {
  constructor(options) {
    super(options)

    init(this, options, instance, create_fragment, safe_not_equal, {
      alias: 0,
      name: 1,
      profilepicture: 2,
      level: 3,
    })

    dispatch_dev('SvelteRegisterComponent', {
      component: this,
      tagName: 'ProfileHeader',
      options,
      id: create_fragment.name,
    })

    const { ctx } = this.$$
    const props = options.props || {}

    if (/*alias*/ ctx[0] === undefined && !('alias' in props)) {
      console.warn("<ProfileHeader> was created without expected prop 'alias'")
    }

    if (/*name*/ ctx[1] === undefined && !('name' in props)) {
      console.warn("<ProfileHeader> was created without expected prop 'name'")
    }

    if (
      /*profilepicture*/ ctx[2] === undefined &&
      !('profilepicture' in props)
    ) {
      console.warn(
        "<ProfileHeader> was created without expected prop 'profilepicture'"
      )
    }

    if (/*level*/ ctx[3] === undefined && !('level' in props)) {
      console.warn("<ProfileHeader> was created without expected prop 'level'")
    }
  }

  get alias() {
    throw new Error(
      "<ProfileHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
    )
  }

  set alias(value) {
    throw new Error(
      "<ProfileHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
    )
  }

  get name() {
    throw new Error(
      "<ProfileHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
    )
  }

  set name(value) {
    throw new Error(
      "<ProfileHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
    )
  }

  get profilepicture() {
    throw new Error(
      "<ProfileHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
    )
  }

  set profilepicture(value) {
    throw new Error(
      "<ProfileHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
    )
  }

  get level() {
    throw new Error(
      "<ProfileHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
    )
  }

  set level(value) {
    throw new Error(
      "<ProfileHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
    )
  }
}

/* src/components/NavTray.svelte generated by Svelte v3.22.2 */

const file$1 = 'src/components/NavTray.svelte'

function create_fragment$1(ctx) {
  let main
  let div0
  let t0
  let t1
  let div1
  let t2
  let t3
  let div2
  let t4
  let t5
  let div3
  let t6

  const block = {
    c: function create() {
      main = element('main')
      div0 = element('div')
      t0 = text('About')
      t1 = space()
      div1 = element('div')
      t2 = text('Activity')
      t3 = space()
      div2 = element('div')
      t4 = text('Inventory')
      t5 = space()
      div3 = element('div')
      t6 = text('Artwork')
      this.h()
    },
    l: function claim(nodes) {
      main = claim_element(nodes, 'MAIN', { class: true })
      var main_nodes = children(main)
      div0 = claim_element(main_nodes, 'DIV', { class: true })
      var div0_nodes = children(div0)
      t0 = claim_text(div0_nodes, 'About')
      div0_nodes.forEach(detach_dev)
      t1 = claim_space(main_nodes)
      div1 = claim_element(main_nodes, 'DIV', { class: true })
      var div1_nodes = children(div1)
      t2 = claim_text(div1_nodes, 'Activity')
      div1_nodes.forEach(detach_dev)
      t3 = claim_space(main_nodes)
      div2 = claim_element(main_nodes, 'DIV', { class: true })
      var div2_nodes = children(div2)
      t4 = claim_text(div2_nodes, 'Inventory')
      div2_nodes.forEach(detach_dev)
      t5 = claim_space(main_nodes)
      div3 = claim_element(main_nodes, 'DIV', { class: true })
      var div3_nodes = children(div3)
      t6 = claim_text(div3_nodes, 'Artwork')
      div3_nodes.forEach(detach_dev)
      main_nodes.forEach(detach_dev)
      this.h()
    },
    h: function hydrate() {
      attr_dev(div0, 'class', 'selected svelte-1snwkpy')
      add_location(div0, file$1, 1, 2, 9)
      attr_dev(div1, 'class', 'svelte-1snwkpy')
      add_location(div1, file$1, 2, 2, 45)
      attr_dev(div2, 'class', 'svelte-1snwkpy')
      add_location(div2, file$1, 3, 2, 67)
      attr_dev(div3, 'class', 'svelte-1snwkpy')
      add_location(div3, file$1, 4, 2, 90)
      attr_dev(main, 'class', 'svelte-1snwkpy')
      add_location(main, file$1, 0, 0, 0)
    },
    m: function mount(target, anchor) {
      insert_dev(target, main, anchor)
      append_dev(main, div0)
      append_dev(div0, t0)
      append_dev(main, t1)
      append_dev(main, div1)
      append_dev(div1, t2)
      append_dev(main, t3)
      append_dev(main, div2)
      append_dev(div2, t4)
      append_dev(main, t5)
      append_dev(main, div3)
      append_dev(div3, t6)
    },
    p: noop,
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(main)
    },
  }

  dispatch_dev('SvelteRegisterBlock', {
    block,
    id: create_fragment$1.name,
    type: 'component',
    source: '',
    ctx,
  })

  return block
}

function instance$1($$self, $$props) {
  const writable_props = []

  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$')
      console.warn(`<NavTray> was created with unknown prop '${key}'`)
  })

  let { $$slots = {}, $$scope } = $$props
  validate_slots('NavTray', $$slots, [])
  return []
}

class NavTray extends SvelteComponentDev {
  constructor(options) {
    super(options)
    init(this, options, instance$1, create_fragment$1, safe_not_equal, {})

    dispatch_dev('SvelteRegisterComponent', {
      component: this,
      tagName: 'NavTray',
      options,
      id: create_fragment$1.name,
    })
  }
}

/* src/components/About.svelte generated by Svelte v3.22.2 */

const file$2 = 'src/components/About.svelte'

function create_fragment$2(ctx) {
  let main

  const block = {
    c: function create() {
      main = element('main')
      this.h()
    },
    l: function claim(nodes) {
      main = claim_element(nodes, 'MAIN', {})
      var main_nodes = children(main)
      main_nodes.forEach(detach_dev)
      this.h()
    },
    h: function hydrate() {
      add_location(main, file$2, 0, 0, 0)
    },
    m: function mount(target, anchor) {
      insert_dev(target, main, anchor)
    },
    p: noop,
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(main)
    },
  }

  dispatch_dev('SvelteRegisterBlock', {
    block,
    id: create_fragment$2.name,
    type: 'component',
    source: '',
    ctx,
  })

  return block
}

function instance$2($$self, $$props) {
  const writable_props = []

  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$')
      console.warn(`<About> was created with unknown prop '${key}'`)
  })

  let { $$slots = {}, $$scope } = $$props
  validate_slots('About', $$slots, [])
  return []
}

class About extends SvelteComponentDev {
  constructor(options) {
    super(options)
    init(this, options, instance$2, create_fragment$2, safe_not_equal, {})

    dispatch_dev('SvelteRegisterComponent', {
      component: this,
      tagName: 'About',
      options,
      id: create_fragment$2.name,
    })
  }
}

/* src/routes/profile.svelte generated by Svelte v3.22.2 */
const file$3 = 'src/routes/profile.svelte'

function create_fragment$3(ctx) {
  let t0
  let t1
  let div
  let t2
  let t3
  let t4
  let current

  const navbar = new Navbar({
    props: { title: 'Profile' },
    $$inline: true,
  })

  const profileheader = new ProfileHeader({
    props: {
      name: /*username_value*/ ctx[0],
      alias: 'bingotheslayer',
      profilepicture: 'profilepicture.jpg',
      level: '40',
    },
    $$inline: true,
  })

  const navtray = new NavTray({ $$inline: true })
  const about = new About({ $$inline: true })
  const tabbar = new Tabbar({ props: { location: 2 }, $$inline: true })

  const block = {
    c: function create() {
      t0 = space()
      create_component(navbar.$$.fragment)
      t1 = space()
      div = element('div')
      create_component(profileheader.$$.fragment)
      t2 = space()
      create_component(navtray.$$.fragment)
      t3 = space()
      create_component(about.$$.fragment)
      t4 = space()
      create_component(tabbar.$$.fragment)
      this.h()
    },
    l: function claim(nodes) {
      const head_nodes = query_selector_all(
        '[data-svelte="svelte-fcey8i"]',
        document.head
      )
      head_nodes.forEach(detach_dev)
      t0 = claim_space(nodes)
      claim_component(navbar.$$.fragment, nodes)
      t1 = claim_space(nodes)
      div = claim_element(nodes, 'DIV', { id: true, class: true })
      var div_nodes = children(div)
      claim_component(profileheader.$$.fragment, div_nodes)
      t2 = claim_space(div_nodes)
      claim_component(navtray.$$.fragment, div_nodes)
      t3 = claim_space(div_nodes)
      claim_component(about.$$.fragment, div_nodes)
      div_nodes.forEach(detach_dev)
      t4 = claim_space(nodes)
      claim_component(tabbar.$$.fragment, nodes)
      this.h()
    },
    h: function hydrate() {
      document.title = 'Profile :: Steam Mobile'
      attr_dev(div, 'id', 'profile')
      attr_dev(div, 'class', 'svelte-meywdx')
      add_location(div, file$3, 21, 0, 541)
    },
    m: function mount(target, anchor) {
      insert_dev(target, t0, anchor)
      mount_component(navbar, target, anchor)
      insert_dev(target, t1, anchor)
      insert_dev(target, div, anchor)
      mount_component(profileheader, div, null)
      append_dev(div, t2)
      mount_component(navtray, div, null)
      append_dev(div, t3)
      mount_component(about, div, null)
      insert_dev(target, t4, anchor)
      mount_component(tabbar, target, anchor)
      current = true
    },
    p: function update(ctx, [dirty]) {
      const profileheader_changes = {}
      if (dirty & /*username_value*/ 1)
        profileheader_changes.name = /*username_value*/ ctx[0]
      profileheader.$set(profileheader_changes)
    },
    i: function intro(local) {
      if (current) return
      transition_in(navbar.$$.fragment, local)
      transition_in(profileheader.$$.fragment, local)
      transition_in(navtray.$$.fragment, local)
      transition_in(about.$$.fragment, local)
      transition_in(tabbar.$$.fragment, local)
      current = true
    },
    o: function outro(local) {
      transition_out(navbar.$$.fragment, local)
      transition_out(profileheader.$$.fragment, local)
      transition_out(navtray.$$.fragment, local)
      transition_out(about.$$.fragment, local)
      transition_out(tabbar.$$.fragment, local)
      current = false
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t0)
      destroy_component(navbar, detaching)
      if (detaching) detach_dev(t1)
      if (detaching) detach_dev(div)
      destroy_component(profileheader)
      destroy_component(navtray)
      destroy_component(about)
      if (detaching) detach_dev(t4)
      destroy_component(tabbar, detaching)
    },
  }

  dispatch_dev('SvelteRegisterBlock', {
    block,
    id: create_fragment$3.name,
    type: 'component',
    source: '',
    ctx,
  })

  return block
}

function instance$3($$self, $$props, $$invalidate) {
  let username_value

  const unsubscribe = username.subscribe((value) => {
    $$invalidate(0, (username_value = value))
  })

  const writable_props = []

  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$')
      console.warn(`<Profile> was created with unknown prop '${key}'`)
  })

  let { $$slots = {}, $$scope } = $$props
  validate_slots('Profile', $$slots, [])

  $$self.$capture_state = () => ({
    Navbar,
    Tabbar,
    ProfileHeader,
    NavTray,
    About,
    username,
    username_value,
    unsubscribe,
  })

  $$self.$inject_state = ($$props) => {
    if ('username_value' in $$props)
      $$invalidate(0, (username_value = $$props.username_value))
  }

  if ($$props && '$$inject' in $$props) {
    $$self.$inject_state($$props.$$inject)
  }

  return [username_value]
}

class Profile extends SvelteComponentDev {
  constructor(options) {
    super(options)
    init(this, options, instance$3, create_fragment$3, safe_not_equal, {})

    dispatch_dev('SvelteRegisterComponent', {
      component: this,
      tagName: 'Profile',
      options,
      id: create_fragment$3.name,
    })
  }
}

export default Profile
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZmlsZS43YTAyODc4OS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvUHJvZmlsZUhlYWRlci5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvcm91dGVzL3Byb2ZpbGUuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGV4cG9ydCBsZXQgYWxpYXMsIG5hbWUsIHByb2ZpbGVwaWN0dXJlLCBsZXZlbDsgXG48L3NjcmlwdD5cblxuPG1haW4+XG48ZGl2IGlkPVwiaGVhZFwiPiAgXG4gIDxkaXYgaWQ9XCJsYXllcjFcIj48L2Rpdj5cbiAgPGRpdiBpZD1cImNvbnRlbnR3cmFwcGVyXCI+XG4gICAgPGRpdiBpZD1cImNvbnRlbnRcIj5cbiAgICAgIDxkaXYgaWQ9XCJwcm9maWxlcGljdHVyZVwiIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKHtwcm9maWxlcGljdHVyZX0pO1wiPjwvZGl2PlxuICAgICAgPGRpdiBpZD1cInVzZXJpbmZvXCI+XG4gICAgICAgIDxoMz57YWxpYXN9PC9oMz5cbiAgICAgICAgPGg1PntuYW1lfTwvaDU+XG4gICAgICA8L2Rpdj5cbiAgICAgIDwhLS0gbmVlZCB0byByaWdodCBsb2dpYyBmb3IgaGFuZGxpbmcgYmFkZ2UgY29sb3IgLS0+XG4gICAgICA8ZGl2IGlkPVwibGV2ZWxcIj57bGV2ZWx9PC9kaXY+XG4gICAgICA8IS0tIG5lZWQgdG8gcmlnaHQgbG9naWMgZm9yIGhhbmRsaW5nIGJhZGdlIGNvbG9yIC0tPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbiAgPGRpdiBpZD1cImxheWVyMlwiIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKGd0YS5qcGcpO1wiPjwvZGl2PlxuICA8ZGl2IGlkPVwibGF5ZXIzXCI+PC9kaXY+XG48L2Rpdj5cbjwvbWFpbj5cblxuPHN0eWxlPlxuICAjaGVhZHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cblxuICAjdXNlcmluZm97XG4gICAgbWFyZ2luLWxlZnQ6IDE4cHg7XG4gIH1cblxuICAjbGV2ZWx7XG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XG4gICAgYm9yZGVyOiAycHggc29saWQgIzQ2N0EzQztcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgbWFyZ2luLWJvdHRvbTogMTJweDtcbiAgICB3aWR0aDogMzVweDtcbiAgICBoZWlnaHQ6IDM1cHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG5cbiAgaDN7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgbGluZS1oZWlnaHQ6IDE7XG4gIH1cblxuICBoNXtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgICBsaW5lLWhlaWdodDogMTtcbiAgICBjb2xvcjogIzY5Njk2OTtcbiAgfVxuXG4gICNwcm9maWxlcGljdHVyZXtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgaGVpZ2h0OiA3NXB4O1xuICAgIHdpZHRoOiA3NXB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgfVxuXG4gICNsYXllcjF7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGhlaWdodDogNTBweDtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gdG9wLCByZ2IoMCwgMCwgMCkscmdiYSgwLDAsMCwgMC4xKSk7XG4gICAgYm90dG9tOiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHotaW5kZXg6IDk5OTtcbiAgfVxuXG4gICNjb250ZW50d3JhcHBlcntcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgei1pbmRleDogOTk7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICAjY29udGVudHtcbiAgICBwYWRkaW5nOiAzMHB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuXG4gICNsYXllcjJ7XG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDE0MHB4O1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgei1pbmRleDogMztcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgb3BhY2l0eTogMC4xO1xuICB9XG5cbiAgI2xheWVyM3tcbiAgICBiYWNrZ3JvdW5kOiAjMEYwQjIwO1xuICAgIGhlaWdodDogMTQwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICB6LWluZGV4OiAyO1xuICB9XG48L3N0eWxlPiIsIjxzY3JpcHQ+XG4gIGltcG9ydCBOYXZiYXIgZnJvbSAnLi4vY29tcG9uZW50cy9OYXZiYXIuc3ZlbHRlJ1xuICBpbXBvcnQgVGFiYmFyIGZyb20gJy4uL2NvbXBvbmVudHMvVGFiYmFyLnN2ZWx0ZSdcbiAgaW1wb3J0IFByb2ZpbGVIZWFkZXIgZnJvbSAnLi4vY29tcG9uZW50cy9Qcm9maWxlSGVhZGVyLnN2ZWx0ZSdcbiAgaW1wb3J0IE5hdlRyYXkgZnJvbSAnLi4vY29tcG9uZW50cy9OYXZUcmF5LnN2ZWx0ZSdcbiAgaW1wb3J0IEFib3V0IGZyb20gJy4uL2NvbXBvbmVudHMvQWJvdXQuc3ZlbHRlJ1xuICBpbXBvcnQgeyB1c2VybmFtZSB9IGZyb20gJy4vc3RvcmVzLmpzJ1xuXG4gIGxldCB1c2VybmFtZV92YWx1ZTtcbiAgXG4gIGNvbnN0IHVuc3Vic2NyaWJlID0gdXNlcm5hbWUuc3Vic2NyaWJlKCh2YWx1ZSkgPT4ge1xuICAgIHVzZXJuYW1lX3ZhbHVlID0gdmFsdWVcbiAgfSlcblxuPC9zY3JpcHQ+XG5cbjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPlByb2ZpbGUgOjogU3RlYW0gTW9iaWxlPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxOYXZiYXIgdGl0bGU9XCJQcm9maWxlXCIgLz5cbjxkaXYgaWQ9XCJwcm9maWxlXCI+XG4gIDxQcm9maWxlSGVhZGVyIG5hbWU9XCJ7dXNlcm5hbWVfdmFsdWV9XCIgYWxpYXM9XCJiaW5nb3RoZXNsYXllclwiIHByb2ZpbGVwaWN0dXJlPVwicHJvZmlsZXBpY3R1cmUuanBnXCIgbGV2ZWw9XCI0MFwiIC8+XG4gIDxOYXZUcmF5IC8+XG4gIDxBYm91dCAvPlxuPC9kaXY+XG48VGFiYmFyIGxvY2F0aW9uPXsyfSAvPlxuXG48c3R5bGU+XG4gICNwcm9maWxle1xuICAgIHBhZGRpbmc6IDYwcHggMHB4O1xuICB9XG48L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUJBV2EsR0FBSzs7O3NCQUNMLEdBQUk7Ozt1QkFHTSxHQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1Q0FKZixHQUFLOzs7OztzQ0FDTCxHQUFJOzs7Ozs7eUNBR00sR0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttRUFOaUMsR0FBYzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0VBQWQsR0FBYzs7O3VEQUU5RCxHQUFLO3FEQUNMLEdBQUk7dURBR00sR0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BZGYsS0FBSztJQUFFLElBQUk7SUFBRSxjQUFjO0lBQUUsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJDcUJ2QixHQUFjOzs7Ozs7Ozs7O2dEQUlwQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUZBSkssR0FBYzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBZGhDLGNBQWM7O09BRVosV0FBVyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUUsS0FBSztrQkFDM0MsY0FBYyxHQUFHLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
